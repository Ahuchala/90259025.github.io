import anime from"../anime.min.js";import{AnimationFrameApplet}from"./animationFrameApplet.min.js";import{crossProduct,magnitude,normalize,scaleVector}from"./raymarchApplet.min.js";import*as THREE from"/scripts/three.js";class ThreeApplet extends AnimationFrameApplet{movingSpeed=.1;moveVelocity=[0,0,0];moveFriction=.96;moveStopThreshhold=.01;lastTimestamp=-1;theta=0;phi=0;fovFactor=1;imageSize=400;imageWidth=400;imageHeight=400;imagePlaneCenterPos=[];forwardVec=[];rightVec=[];upVec=[];cameraPos=[0,0,0];lockedOnOrigin=!0;distanceFromOrigin=1;renderer;scene;camera;constructor({canvas,lockedOnOrigin=!0,cameraPos=[0,0,0]}){super(canvas),this.lockedOnOrigin=lockedOnOrigin,this.cameraPos=cameraPos,this.distanceFromOrigin=magnitude(this.cameraPos),this.listenForKeysPressed(["w","s","a","d","q","e"," ","shift","z"],(key,pressed)=>{if("z"===key){const e={t:0},t=this.fovFactor,i=pressed?.25:1;anime({targets:e,t:1,duration:250,easing:"easeOutQuad",update:()=>{this.fovFactor=(1-e.t)*t+e.t*i,this.camera.fov=100*this.fovFactor,this.camera.updateProjectionMatrix(),this.needNewFrame=!0}})}});const e=setInterval(()=>{this?.wilson?.draggables?.container&&(this.listenForNumTouches(),clearInterval(e))},100)}initThree(){this.scene=new THREE.Scene,this.scene.background=new THREE.Color(0),this.camera=new THREE.PerspectiveCamera(100,1,.01,100),this.renderer=new THREE.WebGLRenderer({canvas:this.wilson.canvas,antialias:!0,context:this.wilson.gl}),this.renderer.setSize(this.imageSize,this.imageSize,!1),this.ambientLight=new THREE.AmbientLight(16777215,.15),this.scene.add(this.ambientLight),this.renderer.useLegacyLights=!0}calculateVectors(){this.forwardVec=[Math.cos(this.theta)*Math.sin(this.phi),Math.sin(this.theta)*Math.sin(this.phi),Math.cos(this.phi)],this.rightVec=normalize([this.forwardVec[1],-this.forwardVec[0],0]),this.upVec=crossProduct(this.rightVec,this.forwardVec),this.lockedOnOrigin&&(this.cameraPos=scaleVector(-this.distanceFromOrigin,this.forwardVec)),this.camera.position.set(0,0,0),this.camera.up.set(...this.upVec),this.camera.lookAt(...this.forwardVec),this.camera.position.set(...this.cameraPos)}moveUpdate(timeElapsed){var e;this.keysPressed.w||2===this.numTouches?this.moveVelocity[0]=1:!this.keysPressed.s&&3!==this.numTouches||(this.moveVelocity[0]=-1),this.keysPressed.d?this.moveVelocity[1]=1:this.keysPressed.a&&(this.moveVelocity[1]=-1),this.keysPressed[" "]?this.moveVelocity[2]=1:this.keysPressed.shift&&(this.moveVelocity[2]=-1),this.lockedOnOrigin||0===this.moveVelocity[0]&&0===this.moveVelocity[1]&&0===this.moveVelocity[2]||(e=[this.moveVelocity[0]*this.forwardVec[0]+this.moveVelocity[1]*this.rightVec[0],this.moveVelocity[0]*this.forwardVec[1]+this.moveVelocity[1]*this.rightVec[1],this.moveVelocity[0]*this.forwardVec[2]+this.moveVelocity[1]*this.rightVec[2]+this.moveVelocity[2]],this.cameraPos[0]+=this.movingSpeed*e[0]*(timeElapsed/6.944),this.cameraPos[1]+=this.movingSpeed*e[1]*(timeElapsed/6.944),this.cameraPos[2]+=this.movingSpeed*e[2]*(timeElapsed/6.944),this.needNewFrame=!0),this.calculateVectors();for(let t=0;t<3;t++)this.moveVelocity[t]*=this.moveFriction**(timeElapsed/6.944),Math.abs(this.moveVelocity[t])<this.moveStopThreshhold&&(this.moveVelocity[t]=0)}async setLockedOnOrigin(value){if(value&&!this.lockedOnOrigin){var t=magnitude(this.cameraPos);const s=normalize(this.cameraPos);var i=Math.acos(this.cameraPos[2]/t);let e=Math.PI-Math.atan2(this.cameraPos[1],this.cameraPos[0]);e>Math.PI&&(e-=2*Math.PI),e<-Math.PI&&(e+=2*Math.PI);const a={r:t,theta:2*Math.PI-this.theta,phi:Math.PI-this.phi};a.theta>Math.PI&&(a.theta-=2*Math.PI),a.theta<-Math.PI&&(a.theta+=2*Math.PI),await anime({targets:a,theta:e,phi:i,r:this.distanceFromOrigin,duration:500,easing:"easeOutCubic",update:()=>{this.wilson.resizeWorld({centerX:a.theta,centerY:a.phi}),this.cameraPos=scaleVector(a.r,s),this.needNewFrame=!0}}).finished}this.lockedOnOrigin=value,this.worldSize=this.lockedOnOrigin?2.5:1.5,this.wilson.resizeWorld({width:this.worldSize,height:this.worldSize,centerX:this.lockedOnOrigin?this.theta:2*Math.PI-this.theta,centerY:this.lockedOnOrigin?this.phi:Math.PI-this.phi,minY:.001-this.worldSize/2,maxY:Math.PI-.001+this.worldSize/2})}}export{ThreeApplet};