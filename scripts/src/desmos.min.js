import{changeOpacity}from"./animation.min.js";import{$$,loadScript}from"./main.min.js";import{siteSettings}from"./settings.min.js";let desmosPurple="#772fbf",desmosBlue="#2f77bf",desmosRed="#bf2f2f",desmosGreen="#2fbf2f";const desmosBlack="#000000";function updateDesmosColors(){desmosPurple=siteSettings.darkTheme?"#60c000":"#772fbf",desmosBlue=siteSettings.darkTheme?"#c06000":"#2f77bf",desmosRed=siteSettings.darkTheme?"#00c0c0":"#bf2f2f",desmosGreen=siteSettings.darkTheme?"#c000c0":"#2fbf2f"}let desmosGraphs={};function clearDesmosGraphs(){desmosGraphs={}}let getDesmosData=()=>({});function setGetDesmosData(newGetDesmosData){getDesmosData=newGetDesmosData}async function createDesmosGraphs(recreating=!1){if(!window.OFFLINE){await loadScript("https://www.desmos.com/api/v1.11/calculator.js?apiKey=dcb31709b452b1cf9dc26972add0fda6");for(const e in desmosGraphs)desmosGraphs[e]?.destroy&&desmosGraphs[e].destroy();desmosGraphs={},updateDesmosColors();const o=getDesmosData();for(const s in o)o[s].expressions.forEach(expression=>{expression.latex=expression.latex.replace(/\(/g,String.raw`\left(`),expression.latex=expression.latex.replace(/\)/g,String.raw`\right)`),expression.latex=expression.latex.replace(/\[/g,String.raw`\left[`),expression.latex=expression.latex.replace(/\]/g,String.raw`\right]`)});$$(".desmos-container").forEach(element=>{var s={keypad:!1,settingsMenu:!1,zoomButtons:!1,showResetButtonOnGraphpaper:!0,border:!1,expressionsCollapsed:!0,invertedColors:siteSettings.darkTheme,xAxisMinorSubdivisions:1,yAxisMinorSubdivisions:1};if(o[element.id].options)for(const t in o[element.id].options)s[t]=o[element.id].options[t];desmosGraphs[element.id]=Desmos.GraphingCalculator(element,s),desmosGraphs[element.id].setMathBounds(o[element.id].bounds),desmosGraphs[element.id].setExpressions(o[element.id].expressions),desmosGraphs[element.id].setDefaultState(desmosGraphs[element.id].getState()),window.DEBUG&&!recreating&&element.addEventListener("click",e=>{e.metaKey&&getDesmosScreenshot(element.id,e.altKey)})})}}async function recreateDesmosGraphs(){var e=Array.from($$(".desmos-container"));e&&(await Promise.all(e.map(element=>changeOpacity({element:element,opacity:0}))),await createDesmosGraphs(!0),await Promise.all(e.map(element=>changeOpacity({element:element,opacity:1}))))}function getDesmosScreenshot(id,forPdf=!1){desmosGraphs[id].updateSettings({showGrid:forPdf,xAxisNumbers:forPdf,yAxisNumbers:forPdf});var e=desmosGraphs[id].getExpressions();for(let s=0;s<e.length;s++)e[s].lineWidth=forPdf?5:7.5,e[s].pointSize=forPdf?15:27,e[s].dragMode="NONE";desmosGraphs[id].setExpressions(e),desmosGraphs[id].asyncScreenshot({width:500,height:500,targetPixelRatio:8},imageData=>{var e=document.createElement("img");e.width=4e3,e.height=4e3,e.style.width="50vmin",e.style.height="50vmin",e.src=imageData,document.body.appendChild(e)})}let uid=0;function getDesmosPoint({point,color,dragMode="XY",style="POINT",secret=!0}){return[{latex:String.raw`(${point[0]}, ${point[1]})`,dragMode:dragMode,pointStyle:style,color:color,secret:secret}]}function getDesmosSlider({expression,min,max,step,secret=!0}){return[{latex:String.raw`${expression}`,sliderBounds:{min:min,max:max,step:step},secret:secret}]}function getDesmosVector({from,to,color}){return uid++,[{latex:String.raw`(${from[0]}, ${from[1]}), (${to[0]}, ${to[1]})`,color:color,lines:!0,points:!1,secret:!0},{latex:String.raw`s_{${uid}} = \arctan(${to[1]} - ${from[1]}, ${to[0]} - ${from[0]})`,secret:!0},{latex:String.raw`(${to[0]}, ${to[1]}), (${to[0]} - .35\cos(s_{${uid}} + .5), ${to[1]} - .35\sin(s_{${uid}} + .5))`,color:color,lines:!0,points:!1,secret:!0},{latex:String.raw`(${to[0]}, ${to[1]}), (${to[0]} - .35\cos(s_{${uid}} - .5), ${to[1]} - .35\sin(s_{${uid}} - .5))`,color:color,lines:!0,points:!1,secret:!0}]}export{desmosPurple,desmosBlue,desmosRed,desmosGreen,desmosBlack,desmosGraphs,clearDesmosGraphs,setGetDesmosData,createDesmosGraphs,recreateDesmosGraphs,getDesmosScreenshot,getDesmosPoint,getDesmosSlider,getDesmosVector};