import{asyncFetch}from"./main.min.js";const glslFilenames=["equality","powers","trig","combinatorics","number-theory","gamma","hypergeometric","su3_character","lambert_w","hurwitz_zeta","zeta"],glslFiles={main:{dependencies:[],keywords:[]},constants:{dependencies:[],keywords:[]}};let doubleEmulationGlsl,doubleEncodingGlsl;function splitGlslFile(filename,text){text=text.replaceAll("\r","");let l=0;for(;;){var s=text.indexOf("#function",l);if(-1===s)break;var i=text.indexOf("\n",s+10);if(-1===i)return void console.error("[GLSL bundling] Invalid function name in file "+filename);let n=text.slice(s+10,i).split(" ");n=n.map(keyword=>keyword.replaceAll(" ",""));for(let e=0;e<n.length;e++)""===n[e]&&(n.splice(e,1),e--);var t=text.indexOf("#endfunction",i+1);if(-1===t)return void console.error("[GLSL bundling] Missing #endfunction in file "+filename);glslFiles[n[0]]={keywords:n};s=text.indexOf("#requires",s);if(-1!==s&&s<t){var a=text.indexOf("\n",s+10);let e=text.slice(s+10,a).split(" ");e=e.map(dependency=>dependency.replaceAll(" ",""));for(let l=0;l<e.length;l++)""===e[l]&&(e.splice(l,1),l--);glslFiles[n[0]].dependencies=e,glslFiles[n[0]].content=text.slice(a+1,t)}else glslFiles[n[0]].dependencies=[],glslFiles[n[0]].content=text.slice(i+1,t);l=t+13}}const glslFilesByDepth=[];let loadedGlsl=!1,loadGlslPromise;async function loadGlsl(){if(!loadedGlsl)return loadGlslPromise=!loadedGlsl&&loadGlslPromise?loadGlslPromise:loadGlslLogic()}async function loadGlslLogic(){glslFiles.constants.content=await asyncFetch("/scripts/glsl/constants"),glslFiles.main.content=await asyncFetch("/scripts/glsl/main"),doubleEmulationGlsl=await asyncFetch("/scripts/glsl/double_emulation"),doubleEncodingGlsl=await asyncFetch("/scripts/glsl/double_encoding");const e={};await Promise.all(glslFilenames.map(filename=>new Promise(resolve=>{asyncFetch("/scripts/glsl/"+filename).then(text=>{e[filename]=text,resolve()})}))),glslFilenames.forEach(filename=>splitGlslFile(filename,e[filename]));var l=Object.keys(glslFiles);l.forEach(filename=>glslFiles[filename].parents=[]),l.forEach(filename=>{var e=glslFiles[filename].dependencies;e.forEach(dependency=>glslFiles[dependency].parents.push(filename)),0===e.length&&"main"!==filename&&glslFiles.main.parents.push(filename)});let n=["main"],s=0;for(;0!==n.length;){const i=[];glslFilesByDepth.push([]),n.forEach(filename=>{void 0===glslFiles[filename].depth?glslFiles[filename].depth=s:glslFiles[filename].depth=Math.max(glslFiles[filename].depth,s),glslFiles[filename].parents.forEach(parent=>{i.includes(parent)||i.push(parent)})}),s++,n=i}l.forEach(filename=>glslFilesByDepth[glslFiles[filename].depth].push(filename)),loadedGlsl=!0}function getGlslBundle(codeString){const e=codeString.match(/[a-zA-Z_][a-zA-Z0-9_]*/g);if(!e)return"";let l="";var n=Object.keys(glslFiles);const s={};n.forEach(filename=>s[filename]=!1),s.main=!0;let i="";n.forEach(filename=>{s[filename]||e.forEach(keyword=>{-1!==glslFiles[filename].keywords.indexOf(keyword)&&(i="[GLSL bundling] Adding "+filename,function e(filename,depth){s[filename]||(s[filename]=!0,0!==depth&&(i+="\n                     "+"   ".repeat(depth)+"â†³ "+filename),glslFiles[filename].dependencies.forEach(dependency=>e(dependency,depth+1)))}(filename,0),console.log(i))})}),l=glslFiles.constants.content+glslFiles.main.content;for(let t=1;t<glslFilesByDepth.length;t++)glslFilesByDepth[t].forEach(filename=>{s[filename]&&(l+=glslFiles[filename].content)});return l}export{doubleEmulationGlsl,doubleEncodingGlsl,loadGlsl,getGlslBundle};