import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{tempShader}from"/scripts/applets/applet.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class LyapunovFractals extends AnimationFrameApplet{wilsonHidden;numIterations=100;pastBrightnessScales=[];resolution=500;resolutionHidden=50;constructor({canvas}){super(canvas);var e=this.createHiddenCanvas(),i={shader:tempShader,canvasWidth:500,worldWidth:4,worldCenterX:2,worldCenterY:2,minWorldWidth:1e-5,minWorldHeight:1e-5,minWorldX:0,minWorldY:0,maxWorldX:4,maxWorldY:4,clampWorldCoordinatesMode:"both",onResizeCanvas:()=>this.needNewFrame=!0,interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}},i=(this.wilson=new WilsonGPU(canvas,i),{shader:tempShader,canvasWidth:this.resolutionHidden});this.wilsonHidden=new WilsonGPU(e,i),this.resume()}run({generatingString}){var e=generatingString.split("").map(l=>"B"===l?1:0),i=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform float brightnessScale;
			
			uniform int seq[12];
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
				
				
				
				float x = .5;
				
				float lambda = 0.0;
				
				vec3 color = vec3(0.0, 0.0, 0.0);
				
				for (int iteration = 0; iteration < ${Math.floor(250/generatingString.length)}; iteration++)
				{
					for (int index = 0; index < ${generatingString.length}; index++)
					{
						if (seq[index] == 0)
						{
							x = z.x * x * (1.0 - x);
							
							color.x += abs(z.x) / 40.0;
						}
						
						else
						{
							x = z.y * x * (1.0 - x);
							
							color.y += abs(z.y) / 40.0;
						}
						
						lambda += log(abs(1.0 - 2.0*x));
						
						color.z = -lambda / 100.0;
					}
				}
				
				lambda *= 0.0001;
				
				if (lambda <= 0.0)
				{
					gl_FragColor = vec4(-lambda / brightnessScale * color, 1.0);
					
					return;
				}
			}
		`;this.wilsonHidden.loadShader({shader:i,uniforms:{worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],brightnessScale:20,seq:e}}),this.wilson.loadShader({shader:i,uniforms:{worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],brightnessScale:20,seq:e}}),this.needNewFrame=!0}drawFrame(){this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY]}),this.wilsonHidden.drawFrame();var e=this.wilsonHidden.readPixels(),i=new Array(this.resolutionHidden*this.resolutionHidden);for(let n=0;n<this.resolutionHidden*this.resolutionHidden;n++)i[n]=e[4*n]+e[4*n+1]+e[4*n+2];i.sort((a,b)=>a-b);let s=(i[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+i[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/255*6;this.pastBrightnessScales.push(s);var t=this.pastBrightnessScales.length;10<t&&this.pastBrightnessScales.shift();for(let r=s=0;r<this.pastBrightnessScales.length;r++)s+=this.pastBrightnessScales[r];s=Math.max(s/t,.5),this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],brightnessScale:s}),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await new Promise(resolve=>setTimeout(resolve,33))}}export{LyapunovFractals};