import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{hsvToRgb}from"/scripts/applets/applet.min.js";import{convertColor}from"/scripts/src/browser.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";class PascalsTriangleColorings extends AnimationFrameApplet{gridSize=20;pixelsPerRow=0;pixelsPerFrame=10;delayOnMeet=0;resolution=2e3;numColors=3;yOffset=0;fillRegions=!0;parities=[];coordinates=[];colors=[];isFinished=[];activeNodes=[];constructor({canvas}){super(canvas);var i={canvasWidth:2e3,fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(canvas,i)}run({resolution,gridSize,numColors}){this.resolution=resolution,this.gridSize=gridSize,this.numColors=numColors,this.wilson.resizeCanvas({width:this.resolution}),this.pixelsPerFrame=Math.ceil(this.resolution/200),this.pixelsPerRow=Math.round(this.resolution/(this.gridSize+2)),this.delayOnMeet=2*this.pixelsPerRow,this.yOffset=(1-Math.sqrt(3)/2*(this.gridSize+1)/(this.gridSize+2))/2*this.resolution,this.activeNodes=[[0,0,0,0]],this.parities=new Array(this.gridSize),this.colors=new Array(this.gridSize),this.isFinished=new Array(this.gridSize),this.coordinates=new Array(this.gridSize);for(let s=0;s<this.gridSize;s++){this.parities[s]=new Array(this.gridSize),this.colors[s]=new Array(this.gridSize),this.coordinates[s]=new Array(this.gridSize),this.isFinished[s]=new Array(this.gridSize);for(let i=0;i<this.gridSize;i++)this.isFinished[s][i]=!1}this.parities[0][0]=1,this.colors[0][0]=hsvToRgb(1/this.numColors,1,1);for(let t=1;t<this.gridSize;t++){this.parities[t][0]=1,this.parities[t][t]=1,this.colors[t][0]=[...this.colors[0][0]],this.colors[t][t]=[...this.colors[0][0]];for(let i=1;i<t;i++)this.parities[t][i]=(this.parities[t-1][i-1]+this.parities[t-1][i])%this.numColors,this.colors[t][i]=hsvToRgb(this.parities[t][i]/this.numColors,1,1)}for(let e=0;e<this.gridSize;e++)for(let i=0;i<=e;i++)this.coordinates[e][i]=this.getCoordinates(e,i);this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.wilson.ctx.lineWidth=10*Math.sqrt(this.pixelsPerRow/150),this.resume()}drawFrame(){for(let i=0;i<this.pixelsPerFrame;i++)for(let t=0;t<this.activeNodes.length;t++)if(0!==this.activeNodes[t][3])this.activeNodes[t][3]--;else if(this.drawLineSegments(t),this.activeNodes[t][2]++,this.activeNodes[t][2]===this.pixelsPerRow-1){if(this.activeNodes[t][0]!==this.gridSize-2){if(!this.isFinished[this.activeNodes[t][0]+1][this.activeNodes[t][1]]){let i=!1;for(let s=0;s<this.activeNodes.length;s++)if(this.activeNodes[s][0]===this.activeNodes[t][0]+1&&this.activeNodes[s][1]===this.activeNodes[t][1]){i=!0,this.activeNodes[s][3]+=this.delayOnMeet;break}i||this.activeNodes.push([this.activeNodes[t][0]+1,this.activeNodes[t][1],0,0])}if(!this.isFinished[this.activeNodes[t][0]+1][this.activeNodes[t][1]+1]){let i=!1;for(let s=0;s<this.activeNodes.length;s++)if(this.activeNodes[s][0]===this.activeNodes[t][0]+1&&this.activeNodes[s][1]===this.activeNodes[t][1]+1){i=!0,this.activeNodes[s][3]+=this.delayOnMeet;break}!i&&this.activeNodes[t][1]+1<=(this.activeNodes[t][0]+1)/2&&this.activeNodes.push([this.activeNodes[t][0]+1,this.activeNodes[t][1]+1,0,0])}}this.isFinished[this.activeNodes[t][0]][this.activeNodes[t][1]]=!0,this.activeNodes.splice(t,1)}0!==this.activeNodes.length&&(this.needNewFrame=!0)}getCoordinates(row,col){let i=(col-Math.floor(row/2))*this.resolution/(this.gridSize+2)+this.resolution/2;row%2==1&&(i-=.5*this.resolution/(this.gridSize+2));var s=(row+1)*Math.sqrt(3)/2*this.resolution/(this.gridSize+2)+this.yOffset;return[.8*i+.1*this.resolution,.8*s+.1*this.resolution]}drawLineSegments(activeNodeIndex){var i=this.activeNodes[activeNodeIndex][2]/this.pixelsPerRow,s=(this.activeNodes[activeNodeIndex][2]+2)/this.pixelsPerRow,t=this.activeNodes[activeNodeIndex][0],e=this.activeNodes[activeNodeIndex][1],o=t+1,r=e;this.wilson.ctx.strokeStyle=convertColor(this.colors[t][e][0]*(1-i)+this.colors[o][r][0]*i,this.colors[t][e][1]*(1-i)+this.colors[o][r][1]*i,this.colors[t][e][2]*(1-i)+this.colors[o][r][2]*i),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[t][e][0]*(1-i)+this.coordinates[o][r][0]*i,this.coordinates[t][e][1]*(1-i)+this.coordinates[o][r][1]*i),this.wilson.ctx.lineTo(this.coordinates[t][e][0]*(1-s)+this.coordinates[o][r][0]*s,this.coordinates[t][e][1]*(1-s)+this.coordinates[o][r][1]*s),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=convertColor(this.colors[t][e][0]*(1-i)+this.colors[o][++r][0]*i,this.colors[t][e][1]*(1-i)+this.colors[o][r][1]*i,this.colors[t][e][2]*(1-i)+this.colors[o][r][2]*i),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[t][e][0]*(1-i)+this.coordinates[o][r][0]*i,this.coordinates[t][e][1]*(1-i)+this.coordinates[o][r][1]*i),this.wilson.ctx.lineTo(this.coordinates[t][e][0]*(1-s)+this.coordinates[o][r][0]*s,this.coordinates[t][e][1]*(1-s)+this.coordinates[o][r][1]*s),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=convertColor(this.colors[t][e=t-e][0]*(1-i)+this.colors[o][r=o-r][0]*i,this.colors[t][e][1]*(1-i)+this.colors[o][r][1]*i,this.colors[t][e][2]*(1-i)+this.colors[o][r][2]*i),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[t][e][0]*(1-i)+this.coordinates[o][r][0]*i,this.coordinates[t][e][1]*(1-i)+this.coordinates[o][r][1]*i),this.wilson.ctx.lineTo(this.coordinates[t][e][0]*(1-s)+this.coordinates[o][r][0]*s,this.coordinates[t][e][1]*(1-s)+this.coordinates[o][r][1]*s),this.wilson.ctx.stroke(),this.wilson.ctx.strokeStyle=convertColor(this.colors[t][e][0]*(1-i)+this.colors[o][++r][0]*i,this.colors[t][e][1]*(1-i)+this.colors[o][r][1]*i,this.colors[t][e][2]*(1-i)+this.colors[o][r][2]*i),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(this.coordinates[t][e][0]*(1-i)+this.coordinates[o][r][0]*i,this.coordinates[t][e][1]*(1-i)+this.coordinates[o][r][1]*i),this.wilson.ctx.lineTo(this.coordinates[t][e][0]*(1-s)+this.coordinates[o][r][0]*s,this.coordinates[t][e][1]*(1-s)+this.coordinates[o][r][1]*s),this.wilson.ctx.stroke()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await new Promise(resolve=>setTimeout(resolve,33))}}export{PascalsTriangleColorings};