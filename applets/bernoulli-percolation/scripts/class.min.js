import anime from"/scripts/anime.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{hsvToRgb}from"/scripts/applets/applet.min.js";import{convertColor}from"/scripts/src/browser.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";class BernoulliPercolation extends AnimationFrameApplet{colors;connections;connectionsByValue;components;componentsByLocation;gridSize;resolution=500;threshold;lastthreshold;doDrawDots;hueRangeStart;hueRangeLength;dotRadiusFraction=.35;dotRadiusPixels;edgeWidthFraction=.2;edgeWidthPixels;edgeLengthPixels;roundRectFudgePixels=2;constructor({canvas}){super(canvas);var t={canvasWidth:this.resolution,fullscreenOptions:{useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(canvas,t)}run({resolution=2e3,gridSize=50,threshold=500,doDrawDots=!1}){this.resolution=resolution,this.gridSize=gridSize,this.lastthreshold=0,this.threshold=threshold,this.doDrawDots=doDrawDots,this.wilson.ctx.roundRect?(this.drawDot=this.drawDotRoundRect,this.drawEdge=this.drawEdgeRectangle,this.roundRectFudgePixels=0,this.dotRadiusFraction=this.doDrawDots?.35:.5,this.edgeWidthFraction=this.doDrawDots?.2:0):(this.drawDot=this.doDrawDots?this.drawDotCircle:this.drawDotRectangle,this.drawEdge=this.doDrawDots?this.drawEdgeRectangle:this.drawEdgeNone),this.dotRadiusPixels=Math.floor(this.resolution/this.gridSize*this.dotRadiusFraction),this.edgeWidthPixels=Math.floor(this.resolution/this.gridSize*this.edgeWidthFraction),this.edgeLengthPixels=Math.floor(this.resolution/this.gridSize),this.wilson.resizeCanvas({width:this.resolution}),this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.hueRangeStart=Math.random(),this.hueRangeLength=.45,this.generateGrid(),this.doDrawDots||this.redrawEverything(!0),this.resume()}getRandomColor(){return hsvToRgb((this.hueRangeStart+Math.random()*this.hueRangeLength)%1,.3+.1*Math.random(),.7+.3*Math.random())}generateGrid(){this.connectionsByValue=new Array(1e3);for(let t=0;t<1e3;t++)this.connectionsByValue[t]=[];this.colors=new Array(this.gridSize),this.connections=new Array(this.gridSize),this.components=new Array(this.gridSize*this.gridSize),this.componentsByLocation=new Array(this.gridSize);for(let i=0;i<this.gridSize;i++){this.colors[i]=new Array(this.gridSize),this.connections[i]=new Array(this.gridSize),this.componentsByLocation[i]=new Array(this.gridSize);for(let t=0;t<this.gridSize;t++)this.colors[i][t]=this.getRandomColor(),this.drawDot(i,t),this.connections[i][t]=[Math.ceil(1e3*Math.random()),Math.ceil(1e3*Math.random())],t!==this.gridSize-1&&this.connectionsByValue[Math.floor(this.connections[i][t][0]-1)].push([i,t,0]),i!==this.gridSize-1&&this.connectionsByValue[Math.floor(this.connections[i][t][1]-1)].push([i,t,1]),this.components[this.gridSize*i+t]=[[i,t]],this.componentsByLocation[i][t]=this.gridSize*i+t}}getComponent(i,j){let s=new Set,e=new Set;for(e.add(i+","+j);0!==e.size;){const o=new Set;e.forEach(dot=>{var t=dot.split(","),[t,i]=[parseInt(t[0]),parseInt(t[1])];t!==this.gridSize-1&&!e.has(t+1+","+i)&&!s.has(t+1+","+i)&&this.connections[t][i][1]<=this.threshold&&o.add(t+1+","+i),i!==this.gridSize-1&&!e.has(t+","+(i+1))&&!s.has(t+","+(i+1))&&this.connections[t][i][0]<=this.threshold&&o.add(t+","+(i+1)),0!==t&&!e.has(t-1+","+i)&&!s.has(t-1+","+i)&&this.connections[t-1][i][1]<=this.threshold&&o.add(t-1+","+i),0!==i&&!e.has(t+","+(i-1))&&!s.has(t+","+(i-1))&&this.connections[t][i-1][0]<=this.threshold&&o.add(t+","+(i-1))}),s=s.union(e),e=new Set(o)}return s}drawDotRoundRect(i,j){var t=(j+.5-this.dotRadiusFraction)/this.gridSize*this.resolution,s=(i+.5-this.dotRadiusFraction)/this.gridSize*this.resolution,e=(this.wilson.ctx.fillStyle=convertColor(...this.colors[i][j]),this.wilson.ctx.beginPath(),(.5-this.dotRadiusFraction)/(.5-.35)*.35*this.resolution/this.gridSize);this.wilson.ctx.roundRect(t-this.roundRectFudgePixels/2,s-this.roundRectFudgePixels/2,2*this.dotRadiusPixels+this.roundRectFudgePixels,2*this.dotRadiusPixels+this.roundRectFudgePixels,e),this.wilson.ctx.fill()}drawDotCircle(i,j){var t=(j+.5)/this.gridSize*this.resolution,s=(i+.5)/this.gridSize*this.resolution;this.wilson.ctx.fillStyle=convertColor(...this.colors[i][j]),this.wilson.ctx.beginPath(),this.wilson.ctx.arc(t,s,this.dotRadiusPixels,0,2*Math.PI,!1),this.wilson.ctx.fill()}drawDotRectangle(i,j){var t=j/this.gridSize*this.resolution,s=i/this.gridSize*this.resolution;this.wilson.ctx.fillStyle=convertColor(...this.colors[i][j]),this.wilson.ctx.fillRect(t-this.roundRectFudgePixels/2,s-this.roundRectFudgePixels/2,this.edgeLengthPixels+this.roundRectFudgePixels,this.edgeLengthPixels+this.roundRectFudgePixels)}drawEdgeRectangle(i,j,index,remove=!1){this.wilson.ctx.fillStyle=convertColor(...remove?[0,0,0]:this.colors[i][j]);var t=(j+.5)/this.gridSize*this.resolution,s=(i+.5)/this.gridSize*this.resolution;0===index?this.wilson.ctx.fillRect(t,s-this.edgeWidthPixels/2-(remove?1:0),this.edgeLengthPixels,this.edgeWidthPixels+(remove?2:0)):this.wilson.ctx.fillRect(t-this.edgeWidthPixels/2-(remove?1:0),s,this.edgeWidthPixels+(remove?2:0),this.edgeLengthPixels)}drawEdgeNone(){}addEdge(i,j,index){this.drawEdge(i,j,index)}removeEdge(i,j,index){this.drawEdge(i,j,index,!0),this.drawDot(i,j),0===index?this.drawDot(i,j+1):this.drawDot(i+1,j)}joinComponents(){var e=structuredClone(this.components),i=structuredClone(this.componentsByLocation);this.components=new Array(this.gridSize*this.gridSize),this.componentsByLocation=new Array(this.gridSize);for(let a=0;a<this.gridSize;a++){this.componentsByLocation[a]=new Array(this.gridSize);for(let t=0;t<this.gridSize;t++)this.components[this.gridSize*a+t]=[],this.componentsByLocation[a][t]=-1}let s=0;for(let l=0;l<this.gridSize;l++)for(let t=0;t<this.gridSize;t++)-1===this.componentsByLocation[l][t]&&(this.components[s]=Array.from(this.getComponent(l,t)).map(dot=>{var t=dot.split(",");return this.componentsByLocation[t[0]][t[1]]=s,[parseInt(t[0]),parseInt(t[1])]}),s++);for(let c=0;c<this.components.length;c++)if(0!==this.components[c].length){var o=new Set;for(let t=0;t<this.components[c].length;t++){var[h,r]=this.components[c][t];o.add(i[h][r])}if(1!==o.size){var n=Array.from(o);let t=0,i=0;for(let s=0;s<n.length;s++)e[n[s]].length>i&&(i=e[n[s]].length,t=s);var d=e[n[t]][0];const g=this.colors[d[0]][d[1]];this.components[c].forEach(dot=>{var[t,i]=dot;this.colors[t][i]=[...g],this.drawDot(t,i),i!==this.gridSize-1&&this.connections[t][i][0]<=this.threshold&&this.drawEdge(t,i,0),t!==this.gridSize-1&&this.connections[t][i][1]<=this.threshold&&this.drawEdge(t,i,1)})}}}splitComponents(){var i=structuredClone(this.components);this.components=new Array(this.gridSize*this.gridSize),this.componentsByLocation=new Array(this.gridSize);for(let n=0;n<this.gridSize;n++){this.componentsByLocation[n]=new Array(this.gridSize);for(let t=0;t<this.gridSize;t++)this.components[this.gridSize*n+t]=[],this.componentsByLocation[n][t]=-1}let s=0;for(let d=0;d<this.gridSize;d++)for(let t=0;t<this.gridSize;t++)-1===this.componentsByLocation[d][t]&&(this.components[s]=Array.from(this.getComponent(d,t)).map(dot=>{var t=dot.split(",");return this.componentsByLocation[t[0]][t[1]]=s,[parseInt(t[0]),parseInt(t[1])]}),s++);for(let a=0;a<i.length;a++)if(0!==i[a].length){var o=new Set;for(let t=0;t<i[a].length;t++){var[e,h]=i[a][t];o.add(this.componentsByLocation[e][h])}if(1!==o.size){var r=Array.from(o);let t=0,i=0;for(let s=0;s<r.length;s++)this.components[r[s]].length>i&&(i=this.components[r[s]].length,t=s);for(let e=0;e<r.length;e++)if(e!==t){const l=this.getRandomColor();this.components[r[e]].forEach(dot=>{var[t,i]=dot;this.colors[t][i]=[...l],this.drawDot(t,i),i!==this.gridSize-1&&this.connections[t][i][0]<=this.threshold&&this.drawEdge(t,i,0),t!==this.gridSize-1&&this.connections[t][i][1]<=this.threshold&&this.drawEdge(t,i,1)})}}}}redrawEverything(forceRectangles=!1){this.wilson.resizeCanvas({width:this.resolution}),this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.resolution,this.resolution),this.dotRadiusPixels=Math.floor(this.resolution/this.gridSize*this.dotRadiusFraction),this.edgeWidthPixels=Math.floor(this.resolution/this.gridSize*this.edgeWidthFraction),this.edgeLengthPixels=Math.floor(this.resolution/this.gridSize);var t=this.drawDot,i=this.drawEdge;forceRectangles&&(this.drawDot=this.drawDotRectangle,this.drawEdge=this.drawEdgeNone,this.roundRectFudgePixels=2*Math.ceil(this.resolution/2e3));for(let s=0;s<this.gridSize;s++)for(let t=0;t<this.gridSize;t++)this.drawDot(s,t),t!==this.gridSize-1&&this.connections[s][t][0]<=this.threshold&&this.drawEdge(s,t,0),s!==this.gridSize-1&&this.connections[s][t][1]<=this.threshold&&this.drawEdge(s,t,1);this.drawDot=t,this.drawEdge=i}async switchDrawEdges(){if(this.wilson.ctx.roundRect){const t={t:0};this.doDrawDots?(this.doDrawDots=!1,this.roundRectFudgePixels=2*Math.ceil(this.resolution/2e3),await anime({targets:t,t:1,duration:250,easing:"easeOutQuint",update:()=>{this.dotRadiusFraction=.35*(1-t.t)+.5*t.t,this.edgeWidthFraction=.2*(1-t.t)+.5*t.t,this.redrawEverything()},complete:()=>{this.roundRectFudgePixels=0,this.redrawEverything(!0)}}).finished):(this.doDrawDots=!0,await anime({targets:t,t:1,duration:250,easing:"easeOutQuint",update:()=>{this.dotRadiusFraction=.5*(1-t.t)+.35*t.t,this.edgeWidthFraction=.5*(1-t.t)+.2*t.t,this.redrawEverything()},complete:()=>{this.dotRadiusFraction=.35,this.edgeWidthFraction=.2,this.redrawEverything()}}).finished)}else this.doDrawDots=!this.doDrawDots,this.drawDot=this.doDrawDots?this.drawDotCircle:this.drawDotRectangle,this.drawEdge=this.doDrawDots?this.drawEdgeRectangle:this.drawEdgeNone,this.roundRectFudgePixels=0,this.redrawEverything()}prepareFrame(){this.threshold!==this.lastthreshold&&(this.needNewFrame=!0)}drawFrame(){var s=this.threshold;if(this.threshold>this.lastthreshold){for(let i=this.lastthreshold+1;i<=s;i++)for(let t=0;t<this.connectionsByValue[i-1].length;t++)this.addEdge(...this.connectionsByValue[i-1][t]);this.joinComponents()}else{for(let i=this.lastthreshold;i>s;i--)for(let t=0;t<this.connectionsByValue[i-1].length;t++)this.removeEdge(...this.connectionsByValue[i-1][t]);this.splitComponents()}this.threshold=s,this.lastthreshold=this.threshold}}export{BernoulliPercolation};