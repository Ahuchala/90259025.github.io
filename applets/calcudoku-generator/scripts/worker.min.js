"use strict";let gridSize,maxCageSize,grid=[],cages=[],cagesByLocation=[],numSolutionsFound=0;function generateCalcudokuGrid(){grid=[],cages=[],cagesByLocation=[],generateNumberGrid(),assignInitialCages();let e=JSON.parse(JSON.stringify(cages)),o=JSON.parse(JSON.stringify(cagesByLocation));for(;;){var g=shuffleArray([...Array(cages.length).keys()]),r=(g.sort((a,b)=>cages[a][2].length-cages[b][2].length),JSON.stringify(cages));for(let a=0;a<g.length;a++){if(-1!==expandCages(g[a]))for(let e=0;e<g.length;e++)g[e]>=cages.length&&g[e]--;1!==(numSolutionsFound=wasmSolvePuzzle(cages))?(cages=JSON.parse(JSON.stringify(e)),cagesByLocation=JSON.parse(JSON.stringify(o)),numSolutionsFound=1):(e=JSON.parse(JSON.stringify(cages)),o=JSON.parse(JSON.stringify(cagesByLocation)),postMessage([grid,cages,cagesByLocation]))}if(JSON.stringify(cages)===r)return}}function shuffleArray(array){let e=array.length;for(;0!==e;){var a=Math.floor(Math.random()*e),o=array[--e];array[e]=array[a],array[a]=o}return array}function generateNumberGrid(){grid=[];for(let a=0;a<gridSize;a++){grid[a]=[];for(let e=0;e<gridSize;e++)grid[a][e]=0}for(let o=0;o<gridSize;o++)for(let e=0;e<gridSize;e++)grid[o][e]=(e+o)%gridSize+1;var e=shuffleArray([shuffleGridRows,shuffleGridRows,shuffleGridColumns,shuffleGridColumns,shuffleGridDigits,shuffleGridDigits]);for(let g=0;g<6;g++)e[g]()}function shuffleGridRows(){var e=shuffleArray([...Array(gridSize).keys()]),a=[];for(let o=0;o<gridSize;o++){a[o]=[];for(let e=0;e<gridSize;e++)a[o][e]=0}for(let g=0;g<gridSize;g++)a[g]=JSON.parse(JSON.stringify(grid[e[g]]));grid=JSON.parse(JSON.stringify(a))}function shuffleGridColumns(){var a=shuffleArray([...Array(gridSize).keys()]),o=[];for(let g=0;g<gridSize;g++){o[g]=[];for(let e=0;e<gridSize;e++)o[g][e]=0}for(let r=0;r<gridSize;r++)for(let e=0;e<gridSize;e++)o[r][e]=grid[r][a[e]];grid=JSON.parse(JSON.stringify(o))}function shuffleGridDigits(){var a=shuffleArray([...Array(gridSize).keys()]),o=[];for(let g=0;g<gridSize;g++){o[g]=[];for(let e=0;e<gridSize;e++)o[g][e]=0}for(let r=0;r<gridSize;r++)for(let e=0;e<gridSize;e++)o[r][e]=a[grid[r][e]-1]+1;grid=JSON.parse(JSON.stringify(o))}function assignInitialCages(){cages=[],cagesByLocation=[],cagesByLocation=[];for(let o=0;o<gridSize;o++){cagesByLocation[o]=[];for(let e=0;e<gridSize;e++){var a=grid[o][e];cages.push(["",a,[[o,e]],a,a,a]),cagesByLocation[o][e]=cages.length-1}}}function expandCages(cageToDestroy){let e;var a=cages[cageToDestroy][2][0][0],o=cages[cageToDestroy][2][0][1];if(Math.random()<.5)if(0!==a&&cagesByLocation[a-1][o]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[a][o],cagesByLocation[a-1][o]))e=cagesByLocation[a-1][o];else if(a!==gridSize-1&&cagesByLocation[a+1][o]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[a][o],cagesByLocation[a+1][o]))e=cagesByLocation[a+1][o];else if(0!==o&&cagesByLocation[a][o-1]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[a][o],cagesByLocation[a][o-1]))e=cagesByLocation[a][o-1];else{if(o===gridSize-1||cagesByLocation[a][o+1]===cageToDestroy||!tryToAddCageToCage(cagesByLocation[a][o],cagesByLocation[a][o+1]))return-1;e=cagesByLocation[a][o+1]}else if(0!==o&&cagesByLocation[a][o-1]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[a][o],cagesByLocation[a][o-1]))e=cagesByLocation[a][o-1];else if(o!==gridSize-1&&cagesByLocation[a][o+1]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[a][o],cagesByLocation[a][o+1]))e=cagesByLocation[a][o+1];else if(0!==a&&cagesByLocation[a-1][o]!==cageToDestroy&&tryToAddCageToCage(cagesByLocation[a][o],cagesByLocation[a-1][o]))e=cagesByLocation[a-1][o];else{if(a===gridSize-1||cagesByLocation[a+1][o]===cageToDestroy||!tryToAddCageToCage(cagesByLocation[a][o],cagesByLocation[a+1][o]))return-1;e=cagesByLocation[a+1][o]}addCageToCage(cageToDestroy,e),cages.splice(cageToDestroy,1);for(let g=0;g<gridSize;g++)for(let e=0;e<gridSize;e++)cagesByLocation[g][e]>cageToDestroy&&cagesByLocation[g][e]--}function tryToAddCageToCage(cageToDestroy,cageToGrow){if(!(cages[cageToGrow][2].length+cages[cageToDestroy][2].length>maxCageSize)){if(""===cages[cageToGrow][0])return!0;if("+"===cages[cageToGrow][0])return!0;if("x"===cages[cageToGrow][0])return!0;if("-"===cages[cageToGrow][0]&&cages[cageToGrow][4]+cages[cageToDestroy][4]<=2*Math.max(cages[cageToGrow][3],cages[cageToDestroy][3]))return!0;if(":"===cages[cageToGrow][0]){var e=Math.max(cages[cageToGrow][3],cages[cageToDestroy][3]);if(e*e%(cages[cageToGrow][5]*cages[cageToDestroy][5])==0)return!0}}return!1}function addCageToCage(cageToDestroy,cageToGrow){var e,a,o;""===cages[cageToGrow][0]?(a=["+","x"],o=[cages[cageToGrow][1]+cages[cageToDestroy][4],cages[cageToGrow][1]*cages[cageToDestroy][5]],2*(e=Math.max(cages[cageToGrow][1],cages[cageToDestroy][3]))>=cages[cageToGrow][1]+cages[cageToDestroy][4]&&(a.push("-"),o.push(2*e-(cages[cageToGrow][1]+cages[cageToDestroy][4]))),e*e%(cages[cageToGrow][1]*cages[cageToDestroy][5])==0&&(a.push(":"),o.push(e*e/(cages[cageToGrow][1]*cages[cageToDestroy][5]))),a.includes(":")&&Math.random()<.5?(e=a.indexOf(":"),cages[cageToGrow][0]=a[e],cages[cageToGrow][1]=o[e]):(e=Math.floor(Math.random()*a.length),cages[cageToGrow][0]=a[e],cages[cageToGrow][1]=o[e])):"+"===cages[cageToGrow][0]?cages[cageToGrow][1]+=cages[cageToDestroy][4]:"x"===cages[cageToGrow][0]?cages[cageToGrow][1]*=cages[cageToDestroy][5]:"-"===cages[cageToGrow][0]?cages[cageToGrow][1]=2*Math.max(cages[cageToGrow][3],cages[cageToDestroy][3])-(cages[cageToGrow][4]+cages[cageToDestroy][4]):":"===cages[cageToGrow][0]&&(a=Math.max(cages[cageToGrow][3],cages[cageToDestroy][3]),o=cages[cageToGrow][5]*cages[cageToDestroy][5],cages[cageToGrow][1]=a*a/o),cages[cageToGrow][2]=cages[cageToGrow][2].concat(cages[cageToDestroy][2]),cages[cageToGrow][3]=Math.max(cages[cageToGrow][3],cages[cageToDestroy][3]),cages[cageToGrow][4]+=cages[cageToDestroy][4],cages[cageToGrow][5]*=cages[cageToDestroy][5];for(let c=0;c<cages[cageToDestroy][2].length;c++){var g=cages[cageToDestroy][2][c][0],r=cages[cageToDestroy][2][c][1];cagesByLocation[g][r]=cageToGrow}}function wasmSolvePuzzle(){var e=[],a={"":0,"+":1,x:2,"-":3,":":4},o=[],g=[],r=[],c=[],s=[];for(let t=0;t<cages.length;t++)e[t]=a[cages[t][0]],o[t]=cages[t][1],g[t]=cages[t][2].length,r[t]=cages[t][3],c[t]=cages[t][4],s[t]=cages[t][5];let i=[];for(let n=0;n<gridSize;n++)i=i.concat(cagesByLocation[n]);return ccallArrays("solve_puzzle","number",["number","array","array","array","array","array","array","array"],[gridSize,e,o,g,r,c,s,i],{heapIn:"HEAPU32"})}onmessage=e=>{gridSize=e.data[0],maxCageSize=e.data[1],importScripts("/applets/calcudoku-generator/scripts/solver.js"),Module.onRuntimeInitialized=function(){importScripts("/scripts/wasm-arrays.min.js"),generateCalcudokuGrid()}};