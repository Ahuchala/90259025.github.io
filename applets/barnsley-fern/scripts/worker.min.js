"use strict";let gridSize,numIterations,fernGraph;const transformationCoefficients=[[0,0,0,.16,0,0],[.85,.04,-.04,.85,0,1.6],[.2,-.26,.23,.22,0,1.6],[-.15,.28,.26,.24,0,.44]];let currentX=0,currentY=0;const minX=-6,maxX=6,minY=-1,maxY=11;function drawFern(){fernGraph=new Uint8ClampedArray(gridSize*gridSize*4);for(let i=0;i<gridSize;i++)for(let r=0;r<gridSize;r++)fernGraph[4*(gridSize*i+r)+3]=255;for(let t=0;t<numIterations;t++){t%Math.floor(numIterations/10)==0&&postMessage([fernGraph]);var n,e=Math.random();let r=3;e<.01?r=0:e<.86?r=1:e<.93&&(r=2),affineTransformation(r),currentX>=maxX||currentX<=minX||currentY>=maxY||currentY<=minY||(e=(currentX-minX)/(maxX-minX),e=Math.floor(gridSize*e),n=(currentY-minY)/(maxY-minY),n=Math.floor(gridSize*(1-n)),fernGraph[4*(gridSize*n+e)+1]++)}postMessage([fernGraph])}function affineTransformation(index){var r=transformationCoefficients[index][0]*currentX+transformationCoefficients[index][1]*currentY+transformationCoefficients[index][4];currentY=transformationCoefficients[index][2]*currentX+transformationCoefficients[index][3]*currentY+transformationCoefficients[index][5],currentX=r}onmessage=e=>{gridSize=e.data[0],numIterations=e.data[1],drawFern()};