import{getGlslBundle,loadGlsl}from"../../../scripts/src/complexGlsl.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{tempShader}from"/scripts/applets/applet.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class GeneralizedJuliaSets extends AnimationFrameApplet{loadPromise;generatingCode="cadd(cpow(z, 2.0), c)";wilsonHidden;switchJuliaModeButton;juliaMode="mandelbrot";pastBrightnessScales=[];numIterations=200;c=[0,0];resolution=500;resolutionHidden=50;constructor({canvas,switchJuliaModeButton}){super(canvas),this.switchJuliaModeButton=switchJuliaModeButton;var e=this.createHiddenCanvas(),i={shader:tempShader,canvasWidth:this.resolution,worldWidth:4,minWorldWidth:1e-5,maxWorldWidth:100,minWorldHeight:1e-5,maxWorldHeight:100,onResizeCanvas:()=>this.needNewFrame=!0,draggableOptions:{draggables:{draggableArg:[0,0]},callbacks:{drag:this.onDragDraggable.bind(this)}},interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0,callbacks:{mousemove:this.onMousemove.bind(this),mousedown:this.onMousedown.bind(this),touchmove:this.onTouchmove.bind(this),touchend:this.onTouchend.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonGPU(canvas,i),this.wilsonHidden=new WilsonGPU(e,{...i,draggableOptions:{},canvasWidth:this.resolutionHidden}),this.wilson.draggables.draggableArg.element.style.display="none",this.loadPromise=loadGlsl()}run({generatingCode="cpow(z, 2.0) + c",resolution=500}){this.generatingCode=generatingCode,this.resolution=resolution;var e=-1!==generatingCode.indexOf("draggableArg"),i=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform int numIterations;
			uniform float brightnessScale;
			
			${e?"uniform vec2 draggableArg;":""}
			
			${getGlslBundle(generatingCode)}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec2 c = z;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 10000.0)
					{
						break;
					}
					
					z = ${generatingCode};
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,t=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 c;
			uniform int numIterations;
			uniform float brightnessScale;
			
			${e?"uniform vec2 draggableArg;":""}
			
			${getGlslBundle(generatingCode)}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					if (length(z) >= 10000.0)
					{
						break;
					}
					
					z = ${generatingCode};
					
					brightness += exp(-length(z));
				}
				
				
				gl_FragColor = vec4(brightness / brightnessScale * color, 1.0);
			}
		`,s=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform vec2 juliaC;
			uniform int numIterations;
			uniform float brightnessScale;
			
			${e?"uniform vec2 draggableArg;":""}
			
			${getGlslBundle(generatingCode)}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec2 c = z;
				
				vec3 color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				float brightness = exp(-length(z));
				
				
				
				bool broken = false;
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						
						broken = true;
						
						break;
					}
					
					if (length(z) >= 10000.0)
					{
						break;
					}
					
					z = ${generatingCode};
					
					brightness += exp(-length(z));
				}
				
				
				
				if (!broken)
				{
					gl_FragColor = vec4(.5 * brightness / brightnessScale * color, 1.0);
				}
				
				
				
				z = uv * 2.0;

				c = juliaC;
				
				color = normalize(vec3(abs(z.x + z.y) / 2.0, abs(z.x) / 2.0, abs(z.y) / 2.0) + .1 / length(z) * vec3(1.0, 1.0, 1.0));
				
				brightness = exp(-length(z));
				
				broken = false;
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						gl_FragColor.xyz /= 4.0;
						
						broken = true;
						
						break;
					}
					
					if (length(z) >= 10000.0)
					{
						break;
					}
					
					z = ${generatingCode};
					
					brightness += exp(-length(z));
				}
				
				if (!broken)
				{
					gl_FragColor += vec4(brightness / brightnessScale * color, 0.0);
				}
			}
		`;for(const n of[this.wilson,this.wilsonHidden])n.loadShader({id:"mandelbrot",shader:i,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,...e?{draggableArg:[0,0]}:{}}}),n.loadShader({id:"julia",shader:t,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,c:this.c,...e?{draggableArg:[0,0]}:{}}}),n.loadShader({id:"juliaPicker",shader:s,uniforms:{worldCenter:[0,0],worldSize:[4,4],numIterations:this.numIterations,brightnessScale:10,juliaC:this.c,...e?{draggableArg:[0,0]}:{}}});this.juliaMode="mandelbrot",this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),this.pastBrightnessScales=[],this.wilson.draggables.draggableArg.element.style.display=e?"block":"none",this.wilson.setDraggables({draggableArg:[0,0]}),this.wilson.resizeWorld({width:4,height:4,centerX:0,centerY:0}),this.resume()}advanceJuliaMode(){"mandelbrot"===this.juliaMode?(this.juliaMode="juliaPicker",this.c=[0,0]):("julia"===this.juliaMode?this.juliaMode="mandelbrot":this.juliaMode="julia",this.wilson.resizeWorld({width:4,height:4,centerX:0,centerY:0})),this.pastBrightnessScales=[],this.wilson.useShader(this.juliaMode),this.wilsonHidden.useShader(this.juliaMode),this.wilson.useInteractionForPanAndZoom="juliaPicker"!==this.juliaMode,this.switchJuliaModeButton&&(this.switchJuliaModeButton.disabled="juliaPicker"===this.juliaMode),this.drawFrame()}onMousemove({x,y}){"juliaPicker"===this.juliaMode&&(this.c=[x,y],requestAnimationFrame(()=>this.drawFrame()))}onMousedown(){"juliaPicker"===this.juliaMode&&this.advanceJuliaMode()}onTouchmove({x,y,event}){event.preventDefault(),"juliaPicker"===this.juliaMode&&(this.c=[x,y],requestAnimationFrame(()=>this.drawFrame()))}onTouchend(){"juliaPicker"===this.juliaMode&&this.advanceJuliaMode()}onDragDraggable({x,y}){for(const e of["mandelbrot","julia","juliaPicker"])this.wilson.setUniforms({draggableArg:[x,y]},e),this.wilsonHidden.setUniforms({draggableArg:[x,y]},e);this.needNewFrame=!0}drawFrame(){var e=3-Math.log2(this.wilson.worldWidth),i=(this.numIterations=Math.ceil(200+40*e),this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:20+e}),"julia"===this.juliaMode?this.wilsonHidden.setUniforms({c:this.c}):"juliaPicker"===this.juliaMode&&this.wilsonHidden.setUniforms({juliaC:this.c}),this.wilsonHidden.drawFrame(),this.wilsonHidden.readPixels()),t=new Array(this.resolutionHidden*this.resolutionHidden);for(let n=0;n<this.resolutionHidden*this.resolutionHidden;n++)t[n]=i[4*n]+i[4*n+1]+i[4*n+2];t.sort((a,b)=>a-b);e=Math.max((t[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+t[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/25,4);this.pastBrightnessScales.push(e),10<this.pastBrightnessScales.length&&this.pastBrightnessScales.shift();let s=0;for(let o=0;o<this.pastBrightnessScales.length;o++)s+=this.pastBrightnessScales[o];s=Math.max(s/this.pastBrightnessScales.length,.5),this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:s}),"julia"===this.juliaMode?this.wilson.setUniforms({c:this.c}):"juliaPicker"===this.juliaMode&&this.wilson.setUniforms({juliaC:this.c}),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await new Promise(resolve=>setTimeout(resolve,33))}}export{GeneralizedJuliaSets};