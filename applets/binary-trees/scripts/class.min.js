import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{changeOpacity,opacityAnimationTime}from"/scripts/src/animation.min.js";import{convertColor}from"/scripts/src/browser.min.js";import{addTemporaryInterval,addTemporaryWorker}from"/scripts/src/main.min.js";import{WilsonCPU}from"/scripts/wilson.min.js";class BinaryTrees extends AnimationFrameApplet{resolution=3e3;root=[];branchPoints=[];linesToDraw=[];numPreviewIterations=10;webWorker;constructor({canvas}){super(canvas);var t={canvasWidth:this.resolution,onResizeCanvas:this.onResizeCanvas.bind(this),draggableOptions:{draggables:{branch0:[-1/7,-1/3],branch1:[1/7,-1/3]},callbacks:{grab:this.onGrabDraggable.bind(this),drag:this.onDragDraggable.bind(this),release:this.onReleaseDraggable.bind(this)}},fullscreenOptions:{fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonCPU(canvas,t),this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.wilson.canvasWidth,this.wilson.canvasHeight),this.root=this.wilson.interpolateWorldToCanvas([0,-.8]),this.branchPoints[0]=this.wilson.interpolateWorldToCanvas(this.wilson.draggables.branch0.location),this.branchPoints[1]=this.wilson.interpolateWorldToCanvas(this.wilson.draggables.branch1.location),this.run(10)}run(numIterations=this.numPreviewIterations){this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.wilson.canvasWidth,this.wilson.canvasHeight);let i=[Math.atan2(this.branchPoints[0][0]-this.root[0],this.branchPoints[0][1]-this.root[1]),Math.atan2(this.branchPoints[1][0]-this.root[0],this.branchPoints[1][1]-this.root[1])];var s=(i[0]-i[1])/2,n=[Math.sqrt((this.branchPoints[0][0]-this.root[0])*(this.branchPoints[0][0]-this.root[0])+(this.branchPoints[0][1]-this.root[1])*(this.branchPoints[0][1]-this.root[1])),Math.sqrt((this.branchPoints[1][0]-this.root[0])*(this.branchPoints[1][0]-this.root[0])+(this.branchPoints[1][1]-this.root[1])*(this.branchPoints[1][1]-this.root[1]))];let o=[this.root],a=1;for(let t=0;t<numIterations;t++){var e=[],r=[],l=(this.wilson.ctx.lineWidth=20*a+1,139*Math.sqrt(a)),h=69*Math.sqrt(a)+128*(1-Math.sqrt(a)),c=19*Math.sqrt(a);this.wilson.ctx.strokeStyle=convertColor(l,h,c);for(let t=0;t<o.length;t++){var w=o[t][1],b=o[t][0],p=o[t][1]+n[0]*a*Math.cos(i[2*t]),m=o[t][0]+n[0]*a*Math.sin(i[2*t]);this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(w,b),this.wilson.ctx.lineTo(p,m),this.wilson.ctx.stroke(),e.push([m,p]),r.push(i[2*t]-s),r.push(i[2*t]+s),w=o[t][1],b=o[t][0],p=o[t][1]+n[1]*a*Math.cos(i[2*t+1]),m=o[t][0]+n[1]*a*Math.sin(i[2*t+1]),this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(w,b),this.wilson.ctx.lineTo(p,m),this.wilson.ctx.stroke(),e.push([m,p]),r.push(i[2*t+1]-s),r.push(i[2*t+1]+s)}o=e,i=r,a*=.675}}animate(){this.linesToDraw=[],this.webWorker=addTemporaryWorker("/applets/binary-trees/scripts/worker.js"),this.webWorker.onmessage=e=>{var t;"done"===e.data[0]?(t=setTimeout(()=>{changeOpacity({element:this.wilson.draggables.branch0.element,opacity:1,duration:opacityAnimationTime}),changeOpacity({element:this.wilson.draggables.branch1.element,opacity:1,duration:opacityAnimationTime})},500),this.timeoutIds.push(t),this.pause()):(this.linesToDraw.push(e.data),this.needNewFrame=!0)},this.webWorker.postMessage([this.root,this.branchPoints]),this.resume()}drawFrame(){for(const t of this.linesToDraw)this.wilson.ctx.strokeStyle=convertColor(...t[4]),this.wilson.ctx.lineWidth=t[5],this.wilson.ctx.beginPath(),this.wilson.ctx.moveTo(t[0],t[1]),this.wilson.ctx.lineTo(t[2],t[3]),this.wilson.ctx.stroke();this.linesToDraw=[]}onGrabDraggable(){this.webWorker?.terminate&&this.webWorker.terminate(),this.wilson.draggables.branch0.element.style.opacity=1,this.wilson.draggables.branch1.element.style.opacity=1,this.wilson.ctx.fillStyle=convertColor(0,0,0),this.wilson.ctx.fillRect(0,0,this.wilson.canvasWidth,this.wilson.canvasHeight),this.run()}onDragDraggable({id,x,y}){var t=id.slice(6);this.branchPoints[t]=this.wilson.interpolateWorldToCanvas([x,y]),this.run()}onReleaseDraggable(){changeOpacity({element:this.wilson.draggables.branch0.element,opacity:0,duration:opacityAnimationTime}),changeOpacity({element:this.wilson.draggables.branch1.element,opacity:0,duration:opacityAnimationTime});let i=0;const s=this;const t=addTemporaryInterval({callback:()=>{var t=i/37;s.wilson.ctx.fillStyle=convertColor(0,0,0,t),s.wilson.ctx.fillRect(0,0,s.wilson.canvasWidth,s.wilson.canvasHeight),i++},delay:8});var n=setTimeout(()=>{clearInterval(t),s.wilson.ctx.fillStyle=convertColor(0,0,0),s.wilson.ctx.fillRect(0,0,s.wilson.canvasWidth,s.wilson.canvasHeight),s.animate(s.root,s.branchPoints)},opacityAnimationTime);this.timeoutIds.push(n)}onResizeCanvas(){this.webWorker?.terminate&&this.webWorker.terminate(),this.wilson.draggables.branch0.element.style.opacity=1,this.wilson.draggables.branch1.element.style.opacity=1,this.root=this.wilson.interpolateWorldToCanvas([0,-.8]),this.branchPoints[0]=this.wilson.interpolateWorldToCanvas(this.wilson.draggables.branch0.location),this.branchPoints[1]=this.wilson.interpolateWorldToCanvas(this.wilson.draggables.branch1.location),this.run()}}export{BinaryTrees};