"use strict";let root=[],branchPoints=[];const numAnimatedIterations=10;async function drawAnimatedBinaryTree(){let a=[Math.atan2(branchPoints[0][0]-root[0],branchPoints[0][1]-root[1]),Math.atan2(branchPoints[1][0]-root[0],branchPoints[1][1]-root[1])];var s=(a[0]-a[1])/2,r=[Math.sqrt((branchPoints[0][0]-root[0])*(branchPoints[0][0]-root[0])+(branchPoints[0][1]-root[1])*(branchPoints[0][1]-root[1])),Math.sqrt((branchPoints[1][0]-root[0])*(branchPoints[1][0]-root[0])+(branchPoints[1][1]-root[1])*(branchPoints[1][1]-root[1]))];let n=[root],e=1;for(let t=0;t<numAnimatedIterations;t++){var h=[],i=[],c=20*e+1,M=[139*Math.sqrt(e),69*Math.sqrt(e)+128*(1-Math.sqrt(e)),19*Math.sqrt(e)];for(let o=0;o<=100;o++){for(let t=0;t<n.length;t++){var P=n[t][1],b=n[t][0],l=(1-o/100)*P+o/100*(n[t][1]+r[0]*e*Math.cos(a[2*t])),u=(1-o/100)*b+o/100*(n[t][0]+r[0]*e*Math.sin(a[2*t]));postMessage([P,b,l,u,M,c]),P=n[t][1],b=n[t][0],l=(1-o/100)*P+o/100*(n[t][1]+r[1]*e*Math.cos(a[2*t+1])),u=(1-o/100)*b+o/100*(n[t][0]+r[1]*e*Math.sin(a[2*t+1])),postMessage([P,b,l,u,M,c])}await new Promise(resolve=>setTimeout(resolve,8))}for(let t=0;t<n.length;t++){var d=n[t][1]+r[0]*e*Math.cos(a[2*t]),m=n[t][0]+r[0]*e*Math.sin(a[2*t]);h.push([m,d]),i.push(a[2*t]-s),i.push(a[2*t]+s),d=n[t][1]+r[1]*e*Math.cos(a[2*t+1]),m=n[t][0]+r[1]*e*Math.sin(a[2*t+1]),h.push([m,d]),i.push(a[2*t+1]-s),i.push(a[2*t+1]+s)}n=h,a=i,e*=.675}}onmessage=async e=>{root=e.data[0],branchPoints=e.data[1],await drawAnimatedBinaryTree(),postMessage(["done"])};