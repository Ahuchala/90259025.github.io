import{getGlslBundle,loadGlsl}from"../../../scripts/src/complexGlsl.min.js";import anime from"/scripts/anime.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{hsvToRgb,tempShader}from"/scripts/applets/applet.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class NewtonsMethodExtended extends AnimationFrameApplet{loadPromise;wilsonHidden;a=[1,0];c=[0,0];draggableArg=[.5,.5];aspectRatio=1;numIterations=100;pastBrightnessScales=[];resolution=500;resolutionHidden=100;derivativePrecision=6;colors;constructor({canvas}){super(canvas);var o=this.createHiddenCanvas(),e={shader:tempShader,canvasWidth:this.resolution,worldWidth:32,worldCenterX:0,worldCenterY:0,minWorldWidth:5e-5,maxWorldWidth:300,minWorldHeight:5e-5,maxWorldHeight:300,onResizeCanvas:()=>this.needNewFrame=!0,draggableOptions:{draggables:{a:this.a,c:this.c,draggableArg:[.5,.5]},callbacks:{drag:this.onDragDraggable.bind(this)}},interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonGPU(canvas,e),this.wilsonHidden=new WilsonGPU(o,{...e,draggableOptions:{},canvasWidth:this.resolutionHidden}),this.wilson.draggables.draggableArg.element.style.display="none",this.loadPromise=loadGlsl()}run({generatingCode}){var o=-1!==generatingCode.indexOf("draggableArg"),e=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldCenter;
			uniform vec2 worldSize;
			
			uniform float derivativePrecision;
			
			uniform vec3 color0;
			uniform vec3 color1;
			uniform vec3 color2;
			uniform vec3 color3;
			
			uniform vec2 a;
			uniform vec2 c;
			${o?"uniform vec2 draggableArg;":""}
			
			uniform float brightnessScale;
			
			const float threshhold = .01;
			
			
			
			${getGlslBundle(generatingCode)}
			
			
			
			//Returns f(z) for a polynomial f with given roots.
			vec2 f(vec2 z)
			{
				return ${generatingCode};
			}
			
			
			
			//Approximates f'(z) for a polynomial f with given roots.
			vec2 cderiv(vec2 z)
			{
				return derivativePrecision * (f(z + vec2(1.0 / (2.0*derivativePrecision), 0.0)) - f(z - vec2(1.0 / (2.0*derivativePrecision), 0.0)));
			}
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				vec2 lastZ = vec2(0.0, 0.0);
				vec2 oldZ = vec2(0.0, 0.0);
				
				gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
				
				
				
				for (int iteration = 0; iteration < 200; iteration++)
				{
					vec2 temp = cmul(cmul(f(z), cinv(cderiv(z))), a) + c;
					
					oldZ = lastZ;
					
					lastZ = z;
					
					z -= temp;
					
					
					
					//If we're slowing down, it's reasonably safe to assume that we're near a root.
					
					float d0 = length(lastZ - z);
					
					if (d0 < threshhold)
					{
						float d1 = length(oldZ - lastZ);
						
						float brightnessAdjust = (log(threshhold) - log(d0)) / (log(d1) - log(d0));
						
						float brightness = 1.0 - (float(iteration) - brightnessAdjust) / brightnessScale;
						
						//Round to a square grid so that basin colors are consistent.
						vec2 theoreticalRoot = floor(z / (threshhold / 3.0)) * threshhold / 3.0;
						
						float c0 = sin(theoreticalRoot.x * 7.239846) + cos(theoreticalRoot.x * 2.945387) + 2.0;
						
						float c1 = sin(theoreticalRoot.y * 5.918445) + cos(theoreticalRoot.y * .987235) + 2.0;
						
						float c2 = sin((theoreticalRoot.x + theoreticalRoot.y) * 1.023974) + cos((theoreticalRoot.x + theoreticalRoot.y) * 9.130874) + 2.0;
						
						float c3 = sin((theoreticalRoot.x - theoreticalRoot.y) * 3.258342) + cos((theoreticalRoot.x - theoreticalRoot.y) * 4.20957) + 2.0;
						
						//Pick an interpolated color between the 4 that we chose earlier.
						gl_FragColor = vec4((c0 * color0 + c1 * color1 + c2 * color2 + c3 * color3) / (c0 + c1 + c2 + c3) * brightness, 1.0);
						
						return;
					}
				}
			}
		`;this.pastBrightnessScales=[],this.a=[1,0],this.c=[0,0],this.colors=this.generateNewPalette(),this.wilson.loadShader({shader:e,uniforms:{worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],derivativePrecision:this.derivativePrecision,color0:[this.colors[0],this.colors[1],this.colors[2]],color1:[this.colors[3],this.colors[4],this.colors[5]],color2:[this.colors[6],this.colors[7],this.colors[8]],color3:[this.colors[9],this.colors[10],this.colors[11]],a:this.a,c:this.c,brightnessScale:12.75,...o?{draggableArg:[0,0]}:{}}}),this.wilsonHidden.loadShader({shader:e,uniforms:{worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],derivativePrecision:this.derivativePrecision,color0:[this.colors[0],this.colors[1],this.colors[2]],color1:[this.colors[3],this.colors[4],this.colors[5]],color2:[this.colors[6],this.colors[7],this.colors[8]],color3:[this.colors[9],this.colors[10],this.colors[11]],a:this.a,c:this.c,brightnessScale:10}}),this.wilson.resizeWorld({width:32,height:32,centerX:0,centerY:0}),this.wilson.draggables.draggableArg.element.style.display=o?"block":"none",this.resume()}generateNewPalette(){var e=new Array(12);let t=0;var s=[.275];for(let r=0;r<4;r++){t=Math.random()*(1-2*(r+1)*.15);for(let o=0;o<=r;o++)t>s[o]&&(t+=.3);s[r]=t-.15,s.sort();var i=hsvToRgb(t,.35*Math.random()+.3,.2*Math.random()+.8);e[3*r]=i[0]/255,e[3*r+1]=i[1]/255,e[3*r+2]=i[2]/255}return e}animatePaletteChange(){const e={t:0},t=[...this.colors],s=this.generateNewPalette();anime({targets:e,t:1,duration:1e3,easing:"easeOutQuad",update:()=>{for(let o=0;o<12;o++)this.colors[o]=(1-e.t)*t[o]+e.t*s[o],this.wilson.setUniforms({color0:[this.colors[0],this.colors[1],this.colors[2]],color1:[this.colors[3],this.colors[4],this.colors[5]],color2:[this.colors[6],this.colors[7],this.colors[8]],color3:[this.colors[9],this.colors[10],this.colors[11]]}),this.wilsonHidden.setUniforms({color0:[this.colors[0],this.colors[1],this.colors[2]],color1:[this.colors[3],this.colors[4],this.colors[5]],color2:[this.colors[6],this.colors[7],this.colors[8]],color3:[this.colors[9],this.colors[10],this.colors[11]]}),this.needNewFrame=!0}})}onDragDraggable({id,x,y}){this[id]=[x,y],this.wilson.setUniforms({[id]:this[id]}),this.wilsonHidden.setUniforms({[id]:this[id]}),this.needNewFrame=!0}drawFrame(){this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY]}),this.wilsonHidden.drawFrame();var o=this.wilsonHidden.readPixels(),e=new Array(this.resolutionHidden*this.resolutionHidden);for(let i=0;i<this.resolutionHidden*this.resolutionHidden;i++)e[i]=Math.max(Math.max(o[4*i],o[4*i+1]),o[4*i+2]);e.sort((a,b)=>a-b);let t=Math.min(7e3/(e[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+e[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)]),30);this.pastBrightnessScales.push(t);var s=this.pastBrightnessScales.length;10<s&&this.pastBrightnessScales.shift();for(let r=t=0;r<this.pastBrightnessScales.length;r++)t+=this.pastBrightnessScales[r];t=Math.max(t/s,.5),this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],brightnessScale:t}),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await new Promise(resolve=>setTimeout(resolve,33))}}export{NewtonsMethodExtended};