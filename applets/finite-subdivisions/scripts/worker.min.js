"use strict";let numVertices,numIterations,polygons;async function drawFiniteSubdivisions(){await drawOuterPolygon();for(let e=0;e<numIterations;e++)await drawLines(calculateLines())}async function drawOuterPolygon(){for(let o=0;o<120;o++){for(let e=0;e<numVertices;e++){var n=HSVtoRGB((2*e+1)/(2*numVertices),1,1);postMessage([polygons[0][e][0],polygons[0][e][1],polygons[0][e][0]+(o+1)/120*(polygons[0][(e+1)%numVertices][0]-polygons[0][e][0]),polygons[0][e][1]+(o+1)/120*(polygons[0][(e+1)%numVertices][1]-polygons[0][e][1]),n])}await new Promise(resolve=>setTimeout(resolve,8))}}function calculateLines(){var t=[],a=[];for(let l=0;l<polygons.length;l++){let e=0,n=0;for(let o=0;o<polygons[l].length;o++)e+=polygons[l][o][0],n+=polygons[l][o][1];e/=polygons[l].length,n/=polygons[l].length;for(let s=0;s<polygons[l].length;s++)t.push([polygons[l][s],[e,n]]),a.push([[e,n],polygons[l][s],polygons[l][(s+1)%polygons[l].length]])}return polygons=a,t}async function drawLines(newLines){for(let o=0;o<120;o++){for(let e=0;e<newLines.length;e++){var n=HSVtoRGB(e/newLines.length,1,1);postMessage([newLines[e][0][0],newLines[e][0][1],newLines[e][0][0]+(o+1)/120*(newLines[e][1][0]-newLines[e][0][0])+1,newLines[e][0][1]+(o+1)/120*(newLines[e][1][1]-newLines[e][0][1]),n])}await new Promise(resolve=>setTimeout(resolve,8))}}function HSVtoRGB(h,s,v){let e,n,o;var t=Math.floor(6*h),a=6*h-t,l=v*(1-s),i=v*(1-a*s),r=v*(1-(1-a)*s);switch(t%6){case 0:e=v,n=r,o=l;break;case 1:e=i,n=v,o=l;break;case 2:e=l,n=v,o=r;break;case 3:e=l,n=i,o=v;break;case 4:e=r,n=l,o=v;break;case 5:e=v,n=l,o=i}return[Math.round(255*e),Math.round(255*n),Math.round(255*o)]}onmessage=e=>{numVertices=e.data[0],numIterations=e.data[1],polygons=e.data[2],drawFiniteSubdivisions()};