"use strict";let gridSize,maxCageSize,uniqueSolution,cages=[],cagesByLocation=[],numSolutionsFound=0;function generateMagicCarpet(){cages=[],cagesByLocation=[],initializeGrid();let i=JSON.parse(JSON.stringify(cages)),r=JSON.parse(JSON.stringify(cagesByLocation));for(;;){let a=!1;var g=shuffleArray([...Array(cages.length).keys()]);g.sort((a,b)=>cages[a][2]*cages[a][3]-cages[b][2]*cages[b][3]);for(let e=0;e<g.length;e++)if(expandCage(g[e])){for(let e=0;e<g.length;e++)g[e]>=cages.length&&g[e]--;uniqueSolution?1!==(numSolutionsFound=solvePuzzle())?(cages=JSON.parse(JSON.stringify(i)),cagesByLocation=JSON.parse(JSON.stringify(r)),numSolutionsFound=1):(a=!0,i=JSON.parse(JSON.stringify(cages)),r=JSON.parse(JSON.stringify(cagesByLocation))):a=!0}if(!a||cages.length<=gridSize)return void postMessage([cages.sort((a,b)=>b[3]*gridSize+b[2]-(a[3]*gridSize+a[2]))])}}function initializeGrid(){cages=new Array(gridSize*gridSize),cagesByLocation=new Array(gridSize);let a=0;for(let i=0;i<gridSize;i++){cagesByLocation[i]=new Array(gridSize);for(let e=0;e<gridSize;e++)cages[a]=[i,e,1,1,0,0],cagesByLocation[i][e]=a,a++}}function shuffleArray(array){let e=array.length;for(;0!==e;){var a=Math.floor(Math.random()*e),i=array[--e];array[e]=array[a],array[a]=i}return array}function expandCage(cageIndex){var e=cages[cageIndex],a=e[0],i=e[1],r=e[2],g=e[3],t=e[4],e=e[5],c=[];if(0!==a&&(n=cages[cagesByLocation[a-1][i]])[1]===i&&n[3]===g&&n[2]*n[3]+g*r<=maxCageSize&&c.push([1,0]),0!==i&&(n=cages[cagesByLocation[a][i-1]])[0]===a&&n[2]===r&&n[2]*n[3]+g*r<=maxCageSize&&c.push([0,1]),0===c.length)return!1;var n=c[Math.floor(Math.random()*c.length)],o=cagesByLocation[a-n[0]][i-n[1]];Math.random()<.5&&(cages[o][4]=cages[o][2]*n[0]+t,cages[o][5]=cages[o][3]*n[1]+e),cages[o][2]+=r*n[0],cages[o][3]+=g*n[1],cages.splice(cageIndex,1);for(let s=0;s<gridSize;s++)for(let e=0;e<gridSize;e++)cagesByLocation[s][e]===cageIndex&&(cagesByLocation[s][e]=o),cagesByLocation[s][e]>cageIndex&&cagesByLocation[s][e]--;return!0}function solvePuzzle(){var a=new Array(gridSize);for(let r=0;r<gridSize;r++){a[r]=new Array(gridSize);for(let e=0;e<gridSize;e++)a[r][e]=!1}for(let g=0;g<cages.length;g++){var e=cages[g][0]+cages[g][4],i=cages[g][1]+cages[g][5];a[e][i]=!0}return solvePuzzleStep(0,a)}function solvePuzzleStep(cageIndex,occupiedCageLocations){if(cageIndex===cages.length)return 1;const o=cages[cageIndex][0]+cages[cageIndex][4],s=cages[cageIndex][1]+cages[cageIndex][5],r=cages[cageIndex][2]*cages[cageIndex][3];if(1==r)return solvePuzzleStep(cageIndex+1,occupiedCageLocations);let d=0;var e=[];for(let a=1;a<=Math.sqrt(r);a++)r%a!=0||a>gridSize||r/a>gridSize||(e.push(a),r/a!==a&&e.push(r/a));return e.forEach(side1=>{var g=r/side1,e=Math.max(o-side1+1,0),a=Math.min(o,gridSize-side1),i=Math.max(s-g+1,0),t=Math.min(s,gridSize-g);for(let n=e;n<=a;n++)for(let r=i;r<=t;r++){let a=!1;for(let i=0;i<side1;i++){for(let e=0;e<g;e++)if(occupiedCageLocations[n+i][r+e]&&(n+i!==o||r+e!==s)){a=!0;break}if(a)break}if(!a){var c=new Array(gridSize);for(let a=0;a<gridSize;a++){c[a]=new Array(gridSize);for(let e=0;e<gridSize;e++)c[a][e]=occupiedCageLocations[a][e]}for(let i=0;i<side1;i++)for(let e=0;e<g;e++)c[n+i][r+e]=!0;d+=solvePuzzleStep(cageIndex+1,c)}}}),d}onmessage=function(e){gridSize=e.data[0],maxCageSize=e.data[1],uniqueSolution=e.data[2],generateMagicCarpet()};