import{getGlslBundle,loadGlsl}from"../../../scripts/src/complexGlsl.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{tempShader}from"/scripts/applets/applet.min.js";import{changeOpacity}from"/scripts/src/animation.min.js";import{convertColor}from"/scripts/src/browser.min.js";import{$$}from"/scripts/src/main.min.js";import{WilsonCPU,WilsonGPU}from"/scripts/wilson.min.js";class FractalSounds extends AnimationFrameApplet{loadPromise;wilsonHidden;wilsonJulia;juliaMode=0;aspectRatio=1;numIterations=200;zoomLevel=0;pastBrightnessScales=[];resolution=500;resolutionHidden=100;needToClear=!1;fixedPointX=0;fixedPointY=0;moved=0;lastX=0;lastY=0;constructor({canvas,lineDrawerCanvas}){super(canvas);var e={shader:tempShader,canvasWidth:this.resolution,fullscreenOptions:{fillScreen:!0,animate:!1,closeWithEscape:!1}},e=(this.wilsonJulia=new WilsonGPU(canvas,e),this.createHiddenCanvas()),t={shader:tempShader,canvasWidth:this.resolutionHidden},e=(this.wilsonHidden=new WilsonGPU(e,t),{canvasWidth:1500,worldWidth:4,minWorldX:-3,maxWorldX:3,minWorldY:-3,maxWorldY:3,onResizeCanvas:()=>this.needNewFrame=!0,interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0,callbacks:{mousemove:this.onHoverCanvas.bind(this),mousedown:this.onGrabCanvas.bind(this),touchstart:this.onGrabCanvas.bind(this),mousedrag:this.onDragCanvas.bind(this),touchmove:this.onDragCanvas.bind(this),mouseup:this.onReleaseCanvas.bind(this),touchend:this.onReleaseCanvas.bind(this),wheel:this.onWheelCanvas.bind(this)}},fullscreenOptions:{onSwitch:this.onSwitchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}}),t=(this.wilson=new WilsonCPU(lineDrawerCanvas,e),this.wilsonForFullscreen=this.wilson,$$(".WILSON_fullscreen-container"));t[0].style.setProperty("z-index",200,"important"),t[1].style.setProperty("z-index",300,"important"),this.wilson.ctx.lineWidth=40,this.loadPromise=loadGlsl()}run({glslCode,jsCode,resolution,numIterations}){this.currentFractalFunction=jsCode,this.resolution=resolution,this.numIterations=numIterations;var e=`
			precision highp float;
			
			varying vec2 uv;
			
			uniform vec2 worldSize;
			uniform vec2 worldCenter;
			
			uniform int numIterations;
			uniform float brightnessScale;
			
			const float hueMultiplier = 100.0;
			
			const vec3 color1 = vec3(1.0, 0.0, 0.0);
			const vec3 color2 = vec3(1.0, .4157, 0.0);
			const vec3 color3 = vec3(1.0, .8471, 0.0);
			const vec3 color4 = vec3(.7333, 1.0, 0.0);
			const vec3 color5 = vec3(.2980, 1.0, 0.0);
			const vec3 color6 = vec3(0.0, 1.0, .1137);
			const vec3 color7 = vec3(0.0, 1.0, .5490);
			const vec3 color8 = vec3(0.0, 1.0, .9647);
			const vec3 color9 = vec3(0.0, .6, 1.0);
			const vec3 color10 = vec3(0.0, .1804, 1.0);
			const vec3 color11 = vec3(.2471, 0.0, 1.0);
			const vec3 color12 = vec3(.6667, 0.0, 1.0);
			const vec3 color13 = vec3(1.0, 0.0, .8980);
			
			
			
			${getGlslBundle(glslCode)}
			
			
			
			vec3 hsvToRgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}
			
			
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				float brightness = exp(-max(length(z), .5));
				
				vec2 c = z;
				
				gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
				
				
				
				vec2 lastZ1 = vec2(0.0, 0.0);
				vec2 lastZ2 = vec2(0.0, 0.0);
				vec2 lastZ3 = vec2(0.0, 0.0);
				vec2 lastZ4 = vec2(0.0, 0.0);
				vec2 lastZ5 = vec2(0.0, 0.0);
				vec2 lastZ6 = vec2(0.0, 0.0);
				vec2 lastZ7 = vec2(0.0, 0.0);
				vec2 lastZ8 = vec2(0.0, 0.0);
				vec2 lastZ9 = vec2(0.0, 0.0);
				vec2 lastZ10 = vec2(0.0, 0.0);
				vec2 lastZ11 = vec2(0.0, 0.0);
				vec2 lastZ12 = vec2(0.0, 0.0);
				vec2 lastZ13 = vec2(0.0, 0.0);
				
				float hue1 = 0.0;
				float hue2 = 0.0;
				float hue3 = 0.0;
				float hue4 = 0.0;
				float hue5 = 0.0;
				float hue6 = 0.0;
				float hue7 = 0.0;
				float hue8 = 0.0;
				float hue9 = 0.0;
				float hue10 = 0.0;
				float hue11 = 0.0;
				float hue12 = 0.0;
				float hue13 = 0.0;
				
				
				
				for (int iteration = 0; iteration < 3001; iteration++)
				{
					if (iteration == numIterations)
					{
						vec3 color = hue1 * color1
							+ hue2 * color2
							+ hue3 * color3
							+ hue4 * color4
							+ hue5 * color5
							+ hue6 * color6
							+ hue7 * color7
							+ hue8 * color8
							+ hue9 * color9
							+ hue10 * color10
							+ hue11 * color11
							+ hue12 * color12
							+ hue13 * color13;
						
						gl_FragColor = vec4(brightness / brightnessScale * normalize(color), 1.0);
						return;
					}
					
					if (length(z) >= 10.0)
					{
						gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
						return;
					}
					
					lastZ13 = lastZ12;
					lastZ12 = lastZ11;
					lastZ11 = lastZ10;
					lastZ10 = lastZ9;
					lastZ9 = lastZ8;
					lastZ8 = lastZ7;
					lastZ7 = lastZ6;
					lastZ6 = lastZ5;
					lastZ5 = lastZ4;
					lastZ4 = lastZ3;
					lastZ3 = lastZ2;
					lastZ2 = lastZ1;
					lastZ1 = z;
					z = ${glslCode};
					
					
					
					brightness += exp(-max(length(z), .5));
					
					hue1 += exp(-hueMultiplier * length(z - lastZ1));
					hue2 += exp(-hueMultiplier * length(z - lastZ2));
					hue3 += exp(-hueMultiplier * length(z - lastZ3));
					hue4 += exp(-hueMultiplier * length(z - lastZ4));
					hue5 += exp(-hueMultiplier * length(z - lastZ5));
					hue6 += exp(-hueMultiplier * length(z - lastZ6));
					hue7 += exp(-hueMultiplier * length(z - lastZ7));
					hue8 += exp(-hueMultiplier * length(z - lastZ8));
					hue9 += exp(-hueMultiplier * length(z - lastZ9));
					hue10 += exp(-hueMultiplier * length(z - lastZ10));
					hue11 += exp(-hueMultiplier * length(z - lastZ11));
					hue12 += exp(-hueMultiplier * length(z - lastZ12));
					hue13 += exp(-hueMultiplier * length(z - lastZ13));
				}
			}
		`;this.wilsonJulia.loadShader({shader:e,uniforms:{worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:1}}),this.wilsonHidden.loadShader({shader:e,uniforms:{worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:1}}),this.juliaMode=0,this.pastBrightnessScales=[],this.wilson.resizeWorld({width:4,height:4,centerX:0,centerY:0}),this.resume()}onHoverCanvas({x,y}){this.showOrbit(x,y),this.moved=0}onGrabCanvas({x,y,event}){this.wilson.canvas.style.opacity=1,"touchstart"===event.type?(this.numTouches=event.touches.length,1===this.numTouches?this.showOrbit(x,y):changeOpacity({element:this.wilson.canvas,opacity:0})):(this.moved=0,this.showOrbit(x,y))}onDragCanvas({x,y}){this.moved++,10<=this.moved&&changeOpacity({element:this.wilson.canvas,opacity:0}),this.showOrbit(x,y)}onReleaseCanvas({x,y,event}){this.moved<10&&(this.playSound(x,y),setTimeout(()=>this.numTouches=0,50)),"touchend"===event.type&&setTimeout(()=>{changeOpacity({element:this.wilson.canvas,opacity:0})},150),this.moved=0}onWheelCanvas({x,y}){this.showOrbit(x,y)}showOrbit(x0,y0){this.wilson.ctx.lineWidth=2,this.wilson.canvas.style.opacity=1,this.wilson.ctx.strokeStyle=convertColor(255,255,255),this.wilson.ctx.clearRect(0,0,this.wilson.canvasWidth,this.wilson.canvasHeight),this.wilson.ctx.beginPath();const e=this.wilson.interpolateWorldToCanvas([x0,y0]);this.wilson.ctx.moveTo(e[1],e[0]);var t,s,i=x0,o=y0;let l=this.currentFractalFunction(x0,y0,i,o);for(let n=0;n<300;n++){if(10<Math.abs(l[0])||10<Math.abs(l[1]))return;t=l[0],s=l[1],l=this.currentFractalFunction(t,s,i,o);const e=this.wilson.interpolateWorldToCanvas([t,s]);this.wilson.ctx.lineTo(e[1],e[0])}this.wilson.ctx.stroke()}playSound(x0,y0){var e=new AudioContext,t=44100,s=Math.floor(3675);let i=x0,o=y0;var l=x0,n=y0;let a=this.currentFractalFunction(i,o,l,n),r=(i=0,o=0);var h=new Array(s),c=new Array(s),t=e.createBuffer(2,t,44100),u=t.getChannelData(0),d=t.getChannelData(1);for(let m=0;m<s;m++){if(100<Math.abs(a[0])||100<Math.abs(a[1]))return;Math.abs(a[0])>r&&(r=Math.abs(a[0])),Math.abs(a[1])>r&&(r=Math.abs(a[1])),h[m]=i,c[m]=o,i=a[0],o=a[1],a=this.currentFractalFunction(i,o,l,n)}for(let p=0;p<s;p++)h[p]/=r,c[p]/=r;for(let g=0;g<s-1;g++)for(let e=0;e<12;e++){var v=.5+.5*Math.sin(Math.PI*e/12-Math.PI/2);u[12*g+e]=(1-v)*(h[g]/2)+v*(h[g+1]/2),d[12*g+e]=(1-v)*(c[g]/2)+v*(c[g+1]/2)}var w=e.createBufferSource(),t=(w.buffer=t,e.createGain());w.connect(t),t.connect(e.destination),w.start(0),t.gain.exponentialRampToValueAtTime(1e-4,1)}drawFrame(){var e=3-Math.log2(this.wilson.worldWidth),t=(this.wilsonHidden.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:20}),this.wilsonHidden.drawFrame(),this.wilsonHidden.readPixels()),s=new Array(this.resolutionHidden*this.resolutionHidden);for(let o=0;o<this.resolutionHidden*this.resolutionHidden;o++)s[o]=t[4*o]+t[4*o+1]+t[4*o+2];s.sort((a,b)=>a-b);e=(s[Math.floor(this.resolutionHidden*this.resolutionHidden*.96)]+s[Math.floor(this.resolutionHidden*this.resolutionHidden*.98)])/20+2*e;this.pastBrightnessScales.push(e),10<this.pastBrightnessScales.length&&this.pastBrightnessScales.shift();let i=0;for(let l=0;l<this.pastBrightnessScales.length;l++)i+=this.pastBrightnessScales[l];i=Math.max(i/this.pastBrightnessScales.length,.5),this.wilsonJulia.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],numIterations:this.numIterations,brightnessScale:i}),this.wilsonJulia.drawFrame()}onSwitchFullscreen(isFullscreen){document.body.querySelectorAll(".WILSON_fullscreen-container").forEach(element=>element.style.setProperty("background-color","rgba(0, 0, 0, 0)","important")),isFullscreen?this.wilsonJulia.enterFullscreen():this.wilsonJulia.exitFullscreen(),this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await new Promise(resolve=>setTimeout(resolve,33))}downloadFrame(filename){this.wilsonJulia.downloadFrame(filename)}}export{FractalSounds};