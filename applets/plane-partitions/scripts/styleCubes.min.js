import anime from"/scripts/anime.min.js";import{hsvToRgb}from"/scripts/applets/applet.min.js";async function colorCubes(array,coordinates,hue,saturation=1){if(0!==coordinates.length){const r=[];coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][xyz[2]].material.forEach(material=>r.push(material.color))}),r.forEach(color=>color.getRGB(color));var e=this.cubeLightness+ +Math.min(this.cubeLightness,1-this.cubeLightness),a=0===e?0:2*(1-this.cubeLightness/e),a=hsvToRgb(hue,saturation*a,e);await anime({targets:r,r:a[0]/255,g:a[1]/255,b:a[2]/255,duration:this.animationTime,delay:(element,index)=>Math.floor(index/6)*this.animationTime/10,easing:"easeOutQuad",update:()=>{r.forEach(color=>color.setRGB(color.r,color.g,color.b)),this.needNewFrame=!0},complete:()=>{r.forEach(color=>color.setRGB(color.r,color.g,color.b)),this.needNewFrame=!0}}).finished}}async function uncolorCubes(array,coordinates){const e=[];coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][xyz[2]].material.forEach(material=>e.push(material.color))}),e.forEach(color=>color.getHSL(color)),await anime({targets:e,s:0,duration:this.animationTime,easing:"easeOutQuad",update:()=>{e.forEach(color=>color.setHSL(color.h,color.s,this.cubeLightness)),this.needNewFrame=!0},complete:()=>{e.forEach(color=>color.setHSL(color.h,color.s,this.cubeLightness)),this.needNewFrame=!0}}).finished}async function colorWalls(array,hue,saturation=1){const e=[];array.floor.concat(array.leftWall).concat(array.rightWall).forEach(row=>{row.forEach(wall=>{wall.material.forEach(material=>e.push(material.color))})}),e.forEach(color=>color.getRGB(color));var a=this.cubeLightness+ +Math.min(this.cubeLightness,1-this.cubeLightness),r=0===a?0:2*(1-this.cubeLightness/a),r=hsvToRgb(hue,saturation*r,a);await anime({targets:e,r:r[0]/255,g:r[1]/255,b:r[2]/255,duration:this.animationTime,delay:(element,index)=>Math.floor(index/6)*this.animationTime/10,easing:"easeOutQuad",update:()=>{e.forEach(color=>color.setRGB(color.r,color.g,color.b)),this.needNewFrame=!0},complete:()=>{e.forEach(color=>color.setRGB(color.r,color.g,color.b)),this.needNewFrame=!0}}).finished}async function raiseCubes(array,coordinates,height){var e=this.in2dView?0:this.animationTime;const a=[];coordinates.forEach(xyz=>{a.push(array.cubes[xyz[0]][xyz[1]][xyz[2]].position),array.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot raise cubes from an infinite height")}),await anime({targets:a,y:height,duration:e,easing:"easeInOutQuad",update:()=>this.needNewFrame=!0,complete:()=>this.needNewFrame=!0}).finished}async function lowerCubes(array,coordinates){var e=this.in2dView?0:this.animationTime;const a=[];coordinates.forEach(xyz=>{a.push(array.cubes[xyz[0]][xyz[1]][xyz[2]].position),array.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot lower cubes onto an infinite height")}),await anime({targets:a,y:(element,index)=>array.numbers[coordinates[index][0]][coordinates[index][1]],duration:e,easing:"easeInOutQuad",update:()=>this.needNewFrame=!0,complete:()=>this.needNewFrame=!0}).finished,coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][array.numbers[xyz[0]][xyz[1]]]=array.cubes[xyz[0]][xyz[1]][xyz[2]],array.cubes[xyz[0]][xyz[1]][xyz[2]]=void 0})}async function moveCubes(sourceArray,sourceCoordinates,targetArray,targetCoordinates,updateCubeArray=!0){const e=[];if(sourceCoordinates.forEach(xyz=>{e.push(sourceArray.cubes[xyz[0]][xyz[1]][xyz[2]].position),targetArray.cubeGroup.attach(sourceArray.cubes[xyz[0]][xyz[1]][xyz[2]]),sourceArray.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot move cubes from an infinite height")}),await anime({targets:e,x:(element,index)=>targetCoordinates[index][1]-(targetArray.footprint-1)/2,y:(element,index)=>targetCoordinates[index][2],z:(element,index)=>targetCoordinates[index][0]-(targetArray.footprint-1)/2,duration:this.animationTime,easing:"easeInOutQuad",update:()=>this.needNewFrame=!0,complete:()=>this.needNewFrame=!0}).finished,updateCubeArray){const a=sourceCoordinates.map(xyz=>sourceArray.cubes[xyz[0]][xyz[1]][xyz[2]]);sourceCoordinates.forEach(xyz=>sourceArray.cubes[xyz[0]][xyz[1]][xyz[2]]),targetCoordinates.forEach((xyz,index)=>{targetArray.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot move cubes to an infinite height"),targetArray.cubes[xyz[0]][xyz[1]][xyz[2]]&&!sourceCoordinates.some(e=>e[0]===xyz[0]&&e[1]===xyz[1]&&e[2]===xyz[2])&&console.warn(`Moving a cube to a location that's already occupied: ${xyz}. This is probably not what you want to do.`),targetArray.cubes[xyz[0]][xyz[1]][xyz[2]]=a[index]})}}async function revealCubes(array,coordinates){if(0!==coordinates.length){const e=[];coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][xyz[2]].material.forEach(material=>e.push(material)),array.numbers[xyz[0]][xyz[1]]===1/0&&console.error("Cannot reveal cubes at an infinite height")}),await anime({targets:e,opacity:1,duration:this.animationTime/2,delay:(element,index)=>Math.floor(index/6)*this.animationTime/10,easing:"easeOutQuad",update:()=>this.needNewFrame=!0,complete:()=>this.needNewFrame=!0}).finished}}async function deleteCubes(array,coordinates,allAtOnce=!1,noAnimation=!1){const e=[];coordinates.forEach(xyz=>{array.cubes[xyz[0]][xyz[1]][xyz[2]].material.forEach(material=>e.push(material))}),await anime({targets:e,opacity:0,duration:this.animationTime/2*!noAnimation,delay:(element,index)=>!allAtOnce*Math.floor(index/6)*this.animationTime/10,easing:"easeOutQuad",update:()=>this.needNewFrame=!0,complete:()=>this.needNewFrame=!0}).finished,e.forEach(material=>material.dispose()),coordinates.forEach(xyz=>{array.cubeGroup.remove(array.cubes[xyz[0]][xyz[1]][xyz[2]]),array.cubes[xyz[0]][xyz[1]][xyz[2]]=void 0})}async function deleteFloor(array,coordinates){const e=[];coordinates.forEach(xyz=>{array.floor[xyz[0]][xyz[1]].material.forEach(material=>e.push(material))}),await anime({targets:e,opacity:0,duration:this.animationTime/2,easing:"easeOutQuad",update:()=>this.needNewFrame=!0,complete:()=>this.needNewFrame=!0}).finished,e.forEach(material=>material.dispose()),coordinates.forEach(xyz=>{array.cubeGroup.remove(array.floor[xyz[0]][xyz[1]]),array.cubes[xyz[0]][xyz[1]]=void 0})}export{colorCubes,uncolorCubes,colorWalls,raiseCubes,lowerCubes,moveCubes,revealCubes,deleteCubes,deleteFloor};