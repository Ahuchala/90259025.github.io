async function sulzgruber(index){const a=this.arrays[index],n=structuredClone(a.numbers);var s=new Array(n.length);for(let i=0;i<n.length;i++){let e=0;for(;e<n.length&&n[e][i]===1/0;)e++;s[i]=e}var h=new Array(n.length);for(let C=0;C<n.length;C++){let e=0;for(;e<n.length&&n[C][e]===1/0;)e++;h[C]=e}var r,l,o={},g={};for(let e=0;e<n.length;e++)g[-e]=[e,0];for(let x=1;x<n.length;x++)g[x]=[0,x];for(let y=1-n.length;y<n.length;y++){let e=g[y][0],t=g[y][1];for(;e<n.length&&t<n.length&&n[e][t]===1/0;)e++,t++;g[y]=[e,t],e===n.length||t===n.length?o[y]=-1:(r=0===t||n[e][t-1]===1/0,l=0===e||n[e-1][t]===1/0,o[y]=r&&l?0:r?3:l?2:1)}var u=[];for(let p=1-n.length;p<n.length;p++)if(1!==o[p]&&3!==o[p]){let l=g[p][0],i=g[p][1];if(0!==n[l][i])for(;;){let e=!1;for(;l<n.length&&i<n.length&&0!==n[l][i];){if((i<n.length-1&&n[l][i]>n[l][i+1]||i===n.length-1&&0<n[l][i])&&(0===o[p]||2===o[p]&&(l<n.length-1&&n[l][i]>n[l+1][i]||l===n.length-1&&0<n[l][i]))){e=!0;break}l++,i++}if(!e)break;let t=l,r=i;for(var f=[[t,r,n[t][r]-1]];;){var b=r-t;if(t<n.length-1&&n[t][r]===n[t+1][r]&&(0===o[b]||3===o[b]))t++;else{if(!(r>h[t]&&(t===n.length-1||t<n.length-1&&n[t][r]>n[t+1][r])))break;r--}f.push([t,r,n[t][r]-1])}f.forEach(box=>n[box[0]][box[1]]--),u.push(f)}}var t=new Array(n.length);for(let A=0;A<n.length;A++){t[A]=new Array(n.length);for(let e=0;e<n.length;e++)t[A][e]=n[A][e]===1/0?1/0:0}var w=await this.addNewArray(index+1,t);await new Promise(resolve=>setTimeout(resolve,this.animationTime));for(let T=0;T<u.length;T++){var c=T/u.length*6/7,m=(await this.colorCubes(a,u[T],c),await this.raiseCubes(a,u[T],a.height+1),u[T].forEach(box=>{a.numbers[box[0]][box[1]]--,this.in2dView&&this.drawSingleCell2dViewText(a,box[0],box[1])}),this.recalculateHeights(a),await new Promise(resolve=>setTimeout(resolve,this.animationTime/5)),u[T][u[T].length-1][0]),d=g[u[T][u[T].length-1][1]-m+u[T].length-1][1];let e=[];var v=Math.max(a.height+1,w.height+1);for(let t=s[d];t<=m;t++)e.push([t,d,v]);for(let r=d-1;r>=h[m];r--)e.push([m,r,v]);await this.moveCubes(a,u[T],w,e),e=[];for(let l=m-1;l>=s[d];l--)e.push([l,d,v]);this.deleteCubes(w,e),e=[];for(let i=d-1;i>=h[m];i--)e.push([m,i,v]);this.deleteCubes(w,e),await this.lowerCubes(w,[[m,d,v]]),w.numbers[m][d]++,this.in2dView&&this.drawSingleCell2dViewText(w,m,d),this.recalculateHeights(w),await new Promise(resolve=>setTimeout(resolve,this.animationTime))}this.currentlyAnimatingCamera=!1,await this.removeArray(index)}async function sulzgruberInverse(index){var u=this.arrays[index],f=u.numbers,b=new Array(f.length);for(let r=0;r<f.length;r++){let e=0;for(;e<f.length&&f[e][r]===1/0;)e++;b[r]=e}var w=new Array(f.length);for(let l=0;l<f.length;l++){let e=0;for(;e<f.length&&f[l][e]===1/0;)e++;w[l]=e}var c={};for(let e=0;e<f.length;e++)c[-e]=[e,0];for(let i=1;i<f.length;i++)c[i]=[0,i];for(let a=1-f.length;a<f.length;a++){let e=c[a][0],t=c[a][1];for(;e<f.length&&t<f.length&&f[e][t]===1/0;)e++,t++;c[a]=[e,t]}let m=0;var t=new Array(f.length);for(let n=0;n<f.length;n++){t[n]=new Array(f.length);for(let e=0;e<f.length;e++)f[n][e]===1/0?t[n][e]=1/0:(t[n][e]=0,m+=f[n][e])}const d=await this.addNewArray(index+1,t);let v=0;for(let H=f.length-1;0<=H;H--)for(let g=f.length-1;0<=g;g--)if(f[g][H]!==1/0)for(;0!==f[g][H];){const S=v/m*6/7;var C=Math.max(u.size+1,d.size+1),x=(await this.colorCubes(u,[[g,H,f[g][H]-1]],S),await this.raiseCubes(u,[[g,H,f[g][H]-1]],C),g),y=H;for(let e=b[y];e<x;e++)u.cubes[e][y][C]=this.addCube(u,y,C,e),u.cubes[e][y][C].material.forEach(material=>material.color.setHSL(S,1,this.cubeLightness));for(let t=w[x];t<y;t++)u.cubes[x][t][C]=this.addCube(u,t,C,x),u.cubes[x][t][C].material.forEach(material=>material.color.setHSL(S,1,this.cubeLightness));let l=[];for(let r=x-1;r>=b[y];r--)l.push([r,y,C]);var p=this.revealCubes(u,l);l=[];for(let n=y-1;n>=w[x];n--)l.push([x,n,C]);var A=this.revealCubes(u,l);await Promise.all([p,A]),l=[];for(let s=w[x];s<y;s++)l.push([x,s,C]);l.push([x,y,u.numbers[x][y]-1]);for(let h=x-1;h>=b[y];h--)l.push([h,y,C]);var p=w[x]-x,T=p+l.length-1,V=[];for(let o=p;o<=T;o++)V.push(structuredClone(c[o]));f[x][y]--,this.recalculateHeights(u),this.in2dView&&this.drawSingleCell2dViewText(u,x,y),await this.moveCubes(u,l,d,V);let i=0,a=d.numbers[V[0][0]][V[0][1]];for(;;){let e=i;for(;e<V.length&&V[e][0]===V[i][0];)e++;l=V.slice(i,e);let t=!0;for(let r=0;r<l.length;r++)if(d.numbers[l[r][0]][l[r][1]]!==a){t=!1;break}if(t)await this.lowerCubes(d,l),l.forEach(coordinate=>{d.numbers[coordinate[0]][coordinate[1]]++}),this.recalculateHeights(d),this.in2dView&&l.forEach(entry=>{this.drawSingleCell2dViewText(d,entry[0],entry[1])}),i=e;else{var z=structuredClone(V.slice(i));for(let e=i;e<V.length;e++)if(V[e][0]++,V[e][1]++,V[e][0]>d.footprint||V[e][1]>d.footprint)return void console.error("Insertion failed!");var E=V.slice(i);await this.moveCubes(d,z,d,E),a=d.numbers[V[i][0]][V[i][1]]}if(i===V.length)break}v++,await new Promise(resolve=>setTimeout(resolve,this.animationTime/2))}this.currentlyAnimatingCamera=!1,await this.removeArray(index)}export{sulzgruber,sulzgruberInverse};