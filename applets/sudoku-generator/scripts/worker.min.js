"use strict";const gridSize=9;let grid=[],nonzeroCells=[],numSolutionsFound=0;function generateSudokuGrid(){grid=[],generateNumberGrid();for(let i=0;i<gridSize;i++)for(let r=0;r<gridSize;r++)nonzeroCells.push([i,r]);nonzeroCells=shuffleArray(nonzeroCells);for(let e=0;e<nonzeroCells.length;e++){var r=nonzeroCells[e],o=grid[r[0]][r[1]];grid[r[0]][r[1]]=0,1!==(numSolutionsFound=wasmSolvePuzzle(grid))&&(grid[r[0]][r[1]]=o,numSolutionsFound=1)}postMessage([grid])}function shuffleArray(array){let r=array.length;for(;0!==r;){var o=Math.floor(Math.random()*r),i=array[--r];array[r]=array[o],array[o]=i}return array}function generateNumberGrid(){grid=[[2,9,5,7,4,3,8,6,1],[4,3,1,8,6,5,9,2,7],[8,7,6,1,9,2,5,4,3],[3,8,7,4,5,9,2,1,6],[6,1,2,3,8,7,4,9,5],[5,4,9,2,1,6,7,3,8],[7,6,3,5,2,4,1,8,9],[9,2,8,6,7,1,3,5,4],[1,5,4,9,3,8,6,7,2]];var r=shuffleArray([shuffleGridRows,shuffleGridRows,shuffleGridColumns,shuffleGridColumns,shuffleGridDigits,shuffleGridDigits]);for(let o=0;o<6;o++)r[o]()}function shuffleGridRows(){var r=Math.floor(3*Math.random()),o=Math.floor(3*Math.random()),i=Math.floor(3*Math.random())+3,e=Math.floor(3*Math.random())+3,a=Math.floor(3*Math.random())+6,d=Math.floor(3*Math.random())+6;for(let l=0;l<gridSize;l++){var t=grid[r][l];grid[r][l]=grid[o][l],grid[o][l]=t,t=grid[i][l],grid[i][l]=grid[e][l],grid[e][l]=t,t=grid[a][l],grid[a][l]=grid[d][l],grid[d][l]=t}}function shuffleGridColumns(){var r=Math.floor(3*Math.random()),o=Math.floor(3*Math.random()),i=Math.floor(3*Math.random())+3,e=Math.floor(3*Math.random())+3,a=Math.floor(3*Math.random())+6,d=Math.floor(3*Math.random())+6;for(let l=0;l<gridSize;l++){var t=grid[l][r];grid[l][r]=grid[l][o],grid[l][o]=t,t=grid[l][i],grid[l][i]=grid[l][e],grid[l][e]=t,t=grid[l][a],grid[l][a]=grid[l][d],grid[l][d]=t}}function shuffleGridDigits(){var o=shuffleArray([...Array(gridSize).keys()]),i=[];for(let e=0;e<gridSize;e++){i[e]=[];for(let r=0;r<gridSize;r++)i[e][r]=0}for(let a=0;a<gridSize;a++)for(let r=0;r<gridSize;r++)i[a][r]=o[grid[a][r]-1]+1;grid=JSON.parse(JSON.stringify(i))}function wasmSolvePuzzle(){let r=[];for(let o=0;o<gridSize;o++)r=r.concat(grid[o]);return ccallArrays("solve_puzzle","number",["array"],[r],{heapIn:"HEAPU8"})}onmessage=()=>{importScripts("/applets/sudoku-generator/scripts/solver.js"),Module.onRuntimeInitialized=()=>{importScripts("/scripts/wasm-arrays.min.js"),generateSudokuGrid()}};