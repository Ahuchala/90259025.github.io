"use strict";let gridSize,margin,brownianTreeGraph=[],color=[],currentBrightness=255,currentRow,currentCol,spawnRadius;const directions=[[-1,0],[0,1],[1,0],[0,-1]];function drawBrownianTree(){brownianTreeGraph=[],color=[];for(let i=0;i<gridSize;i++){brownianTreeGraph[i]=[],color[i]=[];for(let r=0;r<gridSize;r++)brownianTreeGraph[i][r]=0,color[i][r]=[0,0,0]}for(brownianTreeGraph[Math.floor(gridSize/2)][Math.floor(gridSize/2)]=1,color[Math.floor(gridSize/2)][Math.floor(gridSize/2)]=[255,255,255],postMessage([Math.floor(gridSize/2),Math.floor(gridSize/2),[255,255,255]]),margin=10,spawnRadius=5;gridSize-2*spawnRadius>2*margin;){var r=2*Math.random()*Math.PI;for(currentRow=Math.floor(spawnRadius*Math.cos(r)+gridSize/2),currentCol=Math.floor(spawnRadius*Math.sin(r)+gridSize/2);;){var e=[],e=(currentRow>gridSize/2-spawnRadius&&e.push(0),currentCol<gridSize/2+spawnRadius&&e.push(1),currentRow<gridSize/2+spawnRadius&&e.push(2),currentCol>gridSize/2-spawnRadius&&e.push(3),e[Math.floor(Math.random()*e.length)]),o=currentRow+directions[e][0],e=currentCol+directions[e][1];if(1===brownianTreeGraph[o][e]){brownianTreeGraph[currentRow][currentCol]=1;var a=HSVtoRGB((Math.atan2(currentCol-Math.floor(gridSize/2),Math.floor(gridSize/2)-currentRow)+Math.PI)/(2*Math.PI),1,1);color[currentRow][currentCol]=[.9935*color[o][e][0]+.0065*a[0],.9935*color[o][e][1]+.0065*a[1],.9935*color[o][e][2]+.0065*a[2]],postMessage([currentCol,currentRow,[currentBrightness/255*color[currentRow][currentCol][0],currentBrightness/255*color[currentRow][currentCol][1],currentBrightness/255*color[currentRow][currentCol][2]]]),spawnRadius*spawnRadius-(currentRow-gridSize/2)*(currentRow-gridSize/2)-(currentCol-gridSize/2)*(currentCol-gridSize/2)<=5&&(spawnRadius++,currentBrightness=Math.floor(255*(gridSize/2-10-spawnRadius)/(gridSize/2-10)));break}currentRow=o,currentCol=e}}}function HSVtoRGB(h,s,v){let r,e,o;var a=Math.floor(6*h),i=6*h-a,n=v*(1-s),t=v*(1-i*s),c=v*(1-(1-i)*s);switch(a%6){case 0:r=v,e=c,o=n;break;case 1:r=t,e=v,o=n;break;case 2:r=n,e=v,o=c;break;case 3:r=n,e=t,o=v;break;case 4:r=c,e=n,o=v;break;case 5:r=v,e=n,o=t}return[Math.round(255*r),Math.round(255*e),Math.round(255*o)]}onmessage=e=>{gridSize=e.data[0],drawBrownianTree()};