import{getMaxGlslString,getMinGlslString}from"../../../../scripts/applets/applet.min.js";import{BaseGeometry}from"./base.min.js";class S2xEGeometry extends BaseGeometry{geodesicGlsl=`
		vec4 pos = vec4(
			cos(length(rayDirectionVec.xyz) * t)
				* startPos.xyz
			+ sin(length(rayDirectionVec.xyz) * t)
				* normalize(rayDirectionVec.xyz),
			startPos.w + t * rayDirectionVec.w
		);
	`;fogGlsl=`
		return mix(color, fogColor, 1.0 - exp(-totalT * fogScaling * 1.0));
	`;getNormalVecGlsl=`
		return normalize(vec4(-pos.xyz, 0.0));
	`;correctPosGlsl=`
		pos = vec4(
			cos(length(surfaceNormal.xyz) * correctionDistance)
				* pos.xyz
			- sin(length(surfaceNormal.xyz) * correctionDistance)
				* normalize(surfaceNormal.xyz),
			pos.w - correctionDistance * surfaceNormal.w
		);
	`;correctPosition(pos){var o=Math.sqrt(pos[0]*pos[0]+pos[1]*pos[1]+pos[2]*pos[2]);return[pos[0]/o,pos[1]/o,pos[2]/o,pos[3]]}getNormalVec(cameraPos){return this.normalize([-cameraPos[0],-cameraPos[1],-cameraPos[2],0])}}const axesDistances=`
	float distance1 = length(vec2(acos(sqrt(1.0 - pos.y * pos.y)), pos.w)) - .1;
	float distance2 = length(vec2(acos(sqrt(1.0 - pos.x * pos.x)), pos.w)) - .1;
	float distance3 = acos(pos.z) - .1;

	float minDistance = ${getMinGlslString("distance",3)};
`;class S2xEAxes extends S2xEGeometry{distanceEstimatorGlsl=`
		${axesDistances}

		return minDistance;
	`;getColorGlsl=`
		${axesDistances}

		if (minDistance == distance1)
		{
			return vec3(
				1.0,
				.5 + .25 * (.5 * (sin(20.0 * pos.x) + 1.0)),
				.5 + .25 * (.5 * (cos(20.0 * pos.x) + 1.0))
			);
		}

		if (minDistance == distance2)
		{
			return vec3(
				.5 + .25 * (.5 * (sin(20.0 * pos.y) + 1.0)),
				1.0,
				.5 + .25 * (.5 * (cos(20.0 * pos.y) + 1.0))
			);
		}

		return vec3(
			.5 + .25 * (.5 * (sin(5.0 * pos.w) + 1.0)),
			.5 + .25 * (.5 * (cos(5.0 * pos.w) + 1.0)),
			1.0
		);
	`;lightGlsl=`
		vec4 lightDirection1 = vec4(normalize(vec3(2.0, 2.0, -2.0) - pos.xyz), 0.0);
		float dotProduct1 = abs(dot(surfaceNormal, lightDirection1));

		float lightIntensity = 1.5 * dotProduct1;
	`;cameraPos=[-.69965,-.70677,.10463,.61483];normalVec=[.69965,.70676,-.10471,0];upVec=[0,0,0,1];rightVec=[.71092,-.70325,.00345,0];forwardVec=[.0712,.07685,.99449,0]}const roomsDistances=`
	float spacing = 1.09;

	float minRoomDistance = 1000000.0;
	float minSphereDistance = 1000000.0;

	float acosX = acos(pos.x);
	float acosNegX = pi - acosX;
	float acosY = acos(pos.y);
	float acosNegY = pi - acosY;
	float acosZ = acos(pos.z);
	float acosNegZ = pi - acosZ;

	float modPosW = mod(pos.w + spacing / 2.0, spacing) - spacing / 2.0;

	float roomDistance1 = maxT * 2.0;
	float roomDistance2 = maxT * 2.0;
	float roomDistance3 = maxT * 2.0;
	float roomDistance4 = maxT * 2.0;
	float roomDistance5 = maxT * 2.0;
	float roomDistance6 = maxT * 2.0;

	if (sceneTransition < 1.0)
	{
		float scale = exp(max(sceneTransition - 0.8, 0.0) * 5.0);

		float effectiveWallThickness = wallThickness + sceneTransition * .225 / .75;

		roomDistance1 = effectiveWallThickness - length(vec2(acosX, modPosW));
		roomDistance2 = effectiveWallThickness - length(vec2(acosNegX, modPosW));
		roomDistance3 = effectiveWallThickness - length(vec2(acosY, modPosW));
		roomDistance4 = effectiveWallThickness - length(vec2(acosNegY, modPosW));
		roomDistance5 = effectiveWallThickness - length(vec2(acosZ, modPosW));
		roomDistance6 = effectiveWallThickness - length(vec2(acosNegZ, modPosW));

		minRoomDistance = ${getMaxGlslString("roomDistance",6)} * scale;
	}

	float sphereDistance1 = maxT * 2.0;
	float sphereDistance2 = maxT * 2.0;
	float sphereDistance3 = maxT * 2.0;
	float sphereDistance4 = maxT * 2.0;
	float sphereDistance5 = maxT * 2.0;

	if (sceneTransition > 0.0)
	{
		float scale = exp(max(0.2 - sceneTransition, 0.0) * 5.0);

		float effectiveRadius = .3 - .3 / .75 * (1.0 - sceneTransition);

		sphereDistance1 = length(vec2(acosX, modPosW)) - effectiveRadius;
		sphereDistance2 = length(vec2(acosNegX, modPosW)) - effectiveRadius;
		sphereDistance3 = length(vec2(acosY, modPosW)) - effectiveRadius;
		sphereDistance4 = length(vec2(acosNegY, modPosW)) - effectiveRadius;
		sphereDistance5 = length(vec2(acosZ, modPosW)) - effectiveRadius;

		minSphereDistance = ${getMinGlslString("sphereDistance",5)} * scale;
	}

	float minDistance = min(minRoomDistance, minSphereDistance);

	if (totalT < clipDistance)
	{
		minDistance = max(minDistance, clipDistance - length(vec2(acos(dot(pos.xyz, cameraPos.xyz)), abs(pos.w - cameraPos.w))));
	}
`;class S2xERooms extends S2xEGeometry{distanceEstimatorGlsl=`
		${roomsDistances}

		return minDistance;
	`;getColorGlsl=`
		${roomsDistances}

		float wColor = floor((pos.w + spacing / 2.0) / spacing);

		float variation = .04;

		if (minDistance == roomDistance1)
		{
			return vec3(
				.75 + .25 * (.5 * (sin((variation * pos.x + 0.3 * wColor) * 7.0) + 1.0)),
				.65 * (.5 * (sin((variation * pos.y + 0.3 * wColor) * 11.0) + 1.0)),
				.65 * (.5 * (sin((variation * pos.z + 0.3 * wColor) * 89.0) + 1.0))
			);
		}

		if (minDistance == roomDistance2)
		{
			return vec3(
				.65 * (.5 * (sin((variation * pos.x + 0.3 * wColor) * 7.0) + 1.0)),
				.75 + .25 * (.5 * (sin((variation * pos.y + 0.3 * wColor) * 11.0) + 1.0)),
				.65 * (.5 * (sin((variation * pos.z + 0.3 * wColor) * 89.0) + 1.0))
			);
		}

		if (minDistance == roomDistance3)
		{
			return vec3(
				.65 * (.5 * (sin((variation * pos.x + 0.3 * wColor) * 7.0) + 1.0)),
				.65 * (.5 * (sin((variation * pos.y + 0.3 * wColor) * 11.0) + 1.0)),
				.75 + .25 * (.5 * (sin((variation * pos.z + 0.3 * wColor) * 17.0) + 1.0))
			);
		}

		if (minDistance == roomDistance4)
		{
			return vec3(
				.75 + .25 * (.5 * (sin((variation * pos.x + 0.3 * wColor) * 7.0) + 1.0)),
				.75 + .25 * (.5 * (sin((variation * pos.y + 0.3 * wColor) * 11.0) + 1.0)),
				.65 * (.5 * (sin((variation * pos.z + 0.3 * wColor) * 17.0) + 1.0))
			);
		}

		if (minDistance == roomDistance5)
		{
			return vec3(
				.65 * (.5 * (sin((variation * pos.x + 0.3 * wColor) * 7.0) + 1.0)),
				.75 + .25 * (.5 * (sin((variation * pos.y + 0.3 * wColor) * 11.0) + 1.0)),
				.75 + .25 * (.5 * (sin((variation * pos.z + 0.3 * wColor) * 17.0) + 1.0))
			);
		}

		if (minDistance == roomDistance6)
		{
			return vec3(
				.65 + .35 * (.5 * (sin((variation * pos.x + 0.3 * wColor) * 7.0) + 1.0)),
				.65 + .35 * (.5 * (sin((variation * pos.y + 0.3 * wColor) * 11.0) + 1.0)),
				.65 + .35 * (.5 * (sin((variation * pos.z + 0.3 * wColor) * 17.0) + 1.0))
			);
		}

		if (minDistance == sphereDistance1)
		{
			return vec3(
				.75 + .25 * (.5 * (sin(wColor * 7.0) + 1.0)),
				.65 * (.5 * (sin(wColor * 11.0) + 1.0)),
				.65 * (.5 * (sin(wColor * 89.0) + 1.0))
			);
		}

		if (minDistance == sphereDistance2)
		{
			return vec3(
				.65 * (.5 * (sin(wColor * 7.0) + 1.0)),
				.75 + .25 * (.5 * (sin(wColor * 11.0) + 1.0)),
				.65 * (.5 * (sin(wColor * 89.0) + 1.0))
			);
		}

		if (minDistance == sphereDistance3)
		{
			return vec3(
				.65 * (.5 * (sin(wColor * 7.0) + 1.0)),
				.65 * (.5 * (sin(wColor * 11.0) + 1.0)),
				.75 + .25 * (.5 * (sin(wColor * 17.0) + 1.0))
			);
		}

		if (minDistance == sphereDistance4)
		{
			return vec3(
				.75 + .25 * (.5 * (sin(wColor * 7.0) + 1.0)),
				.75 + .25 * (.5 * (sin(wColor * 11.0) + 1.0)),
				.65 * (.5 * (sin(wColor * 17.0) + 1.0))
			);
		}

		if (minDistance == sphereDistance5)
		{
			return vec3(
				.88 + .12 * (.5 * (sin(wColor * 7.0) + 1.0)),
				.88 + .12 * (.5 * (sin(wColor * 11.0) + 1.0)),
				.88 + .12 * (.5 * (sin(wColor * 17.0) + 1.0))
			);
		}
	`;lightGlsl=`
		float spacing = 1.09;
		vec4 modPos = vec4(pos.xyz, mod(pos.w + spacing / 2.0, spacing) - spacing / 2.0);

		vec4 lightDirection1 = normalize(vec4(2.0, 2.0, 2.0, -2.0) - modPos);
		float dotProduct1 = abs(dot(surfaceNormal, lightDirection1));

		float lightIntensity1 = 1.5 * dotProduct1;

		pos.xyz /= 1.001;
		surfaceNormal = getSurfaceNormal(pos, totalT);

		vec4 lightDirection2 = normalize(vec4(0.0, 2.0, 2.0, 2.5) - modPos);
		float dotProduct2 = dot(surfaceNormal, lightDirection2);

		vec4 lightDirection3 = normalize(vec4(2.0, 0.0, -2.0, 2.5) - modPos);
		float dotProduct3 = dot(surfaceNormal, lightDirection3);

		float lightIntensity2 = 1.3 * max(dotProduct2, dotProduct3);

		float lightIntensity = mix(lightIntensity1, lightIntensity2, sceneTransition);
	`;cameraPos=[0,0,-1,0];normalVec=[0,0,-1,0];upVec=[0,0,0,1];rightVec=[1,0,0,0];forwardVec=[0,-1,0,0];uniformGlsl=`
		uniform float sceneTransition;
		uniform float wallThickness;
	`;uniformNames=["sceneTransition","wallThickness"];getUpdatedUniforms(){return{wallThickness:.9557-this.sliderValues.wallThickness/10,clipDistance:this.sliderValues.clipDistance,sceneTransition:this.sliderValues.sceneTransition}}uiElementsUsed="#wall-thickness-slider, #switch-scene-button, #clip-distance-slider";wallThicknessData=[.8,-.45,.8];doClipBrightening=!0;getNearestCenter(){var o=1.09,s=(this.cameraPos[3]+o/2)%o,e=[[1,0,0,-o/2],[-1,0,0,-o/2],[0,1,0,-o/2],[0,-1,0,-o/2],[0,0,1,-o/2],[0,0,-1,-o/2],[1,0,0,o/2],[-1,0,0,o/2],[0,1,0,o/2],[0,-1,0,o/2],[0,0,1,o/2],[0,0,-1,o/2]];let i=Math.PI,t=0;for(let c=0;c<e.length;c++){var a=Math.acos(e[c][0]*this.cameraPos[0]+e[c][1]*this.cameraPos[1]+e[c][2]*this.cameraPos[2]),n=s-e[c][3],a=a*a+n*n;a<i&&(i=a,t=c)}return[e[t][0],e[t][1],e[t][2],this.cameraPos[3]-s+e[t][3]]}getNearestCorner(){var o=1.09,s=(this.cameraPos[3]+o/2)%o-o/2,e=1/Math.sqrt(3),i=[[e,e,e,o/2],[e,e,e,-o/2],[e,e,-e,o/2],[e,e,-e,-o/2],[e,-e,e,o/2],[e,-e,e,-o/2],[e,-e,-e,o/2],[e,-e,-e,-o/2],[-e,e,e,o/2],[-e,e,e,-o/2],[-e,e,-e,o/2],[-e,e,-e,-o/2],[-e,-e,e,o/2],[-e,-e,e,-o/2],[-e,-e,-e,o/2],[-e,-e,-e,-o/2]];let t=Math.PI,a=0;for(let r=0;r<i.length;r++){var n=Math.acos(i[r][0]*this.cameraPos[0]+i[r][1]*this.cameraPos[1]+i[r][2]*this.cameraPos[2]),c=s-i[r][3],n=n*n+c*c;n<t&&(t=n,a=r)}return[i[a][0],i[a][1],i[a][2],this.cameraPos[3]-s+i[a][3]]}}export{S2xEGeometry,S2xEAxes,S2xERooms};