class BaseGeometry{geodesicGlsl=`
		vec4 pos = startPos + t * rayDirectionVec;
	`;dotProductGlsl=`
		return dot(v, w);
	`;normalizeGlsl=`
		return normalize(dir);
	`;fogGlsl=`
		return mix(color, fogColor, 1.0 - exp(-length(pos - cameraPos) * fogScaling));
	`;updateTGlsl=`
		lastTIncrease = distanceToScene * stepFactor;
		
		t += lastTIncrease;
	`;getNormalVecGlsl=`
		return vec4(0.0, 0.0, 0.0, 1.0);
	`;correctPosGlsl=`
		pos -= surfaceNormal * correctionDistance;
	`;maxMarches="200";maxT="50.0";ambientOcclusionDenominator="100.0";stepFactor="0.99";dotProduct(vec1,vec2){return vec1[0]*vec2[0]+vec1[1]*vec2[1]+vec1[2]*vec2[2]+vec1[3]*vec2[3]}normalize(vec){var e=Math.sqrt(this.dotProduct(vec,vec));return[vec[0]/e,vec[1]/e,vec[2]/e,vec[3]/e]}followGeodesic(pos,dir,t){return[pos[0]+t*dir[0],pos[1]+t*dir[1],pos[2]+t*dir[2],pos[3]+t*dir[3]]}teleportCamera(){}getNearestCenter(){return[...this.cameraPos]}getNearestCorner(){return[...this.cameraPos]}getNormalVec(){return[0,0,0,1]}correctPosition(pos){return pos}correctVectors(){var e=this.dotProduct(this.normalVec,this.upVec),r=this.dotProduct(this.normalVec,this.rightVec),t=this.dotProduct(this.normalVec,this.forwardVec);for(let o=0;o<4;o++)this.upVec[o]-=e*this.normalVec[o],this.rightVec[o]-=r*this.normalVec[o],this.forwardVec[o]-=t*this.normalVec[o];this.upVec=this.normalize(this.upVec),this.rightVec=this.normalize(this.rightVec),this.forwardVec=this.normalize(this.forwardVec)}distanceEstimatorGlsl;getColorGlsl;lightGlsl;functionGlsl;raymarchSetupGlsl;finalTeleportationGlsl;usesFiberComponent=!1;cameraPos;normalVec;upVec;rightVec;forwardVec;lockedOnOrigin=!1;render1D=!1;drawFrameCallback(){}handleMovingCallback(){}movingSpeed=1;aspectRatio;ignoreAspectRatio=!1;fov;uniformGlsl;uniformNames;getUpdatedUniforms(){}wallThicknessData;maxClipDistance=5;doClipBrightening=!1;uiElementsUsed="";sliderValues={sceneTransition:0,wallThickness:0,clipDistance:0,fiberThickness:0}}export{BaseGeometry};