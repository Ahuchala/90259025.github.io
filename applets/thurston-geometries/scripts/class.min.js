import{Applet,tempShader}from"../../../scripts/applets/applet.min.js";import{createShader}from"./createShader.min.js";import{SolRooms,SolSpheres}from"./geometries/sol.min.js";import anime from"/scripts/anime.min.js";import{edgeDetectShader}from"/scripts/applets/raymarchApplet.min.js";import{$}from"/scripts/src/main.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";const moveFriction=.96,moveStopThreshhold=.01,rollingFriction=.92,rollingStopThreshhold=.01;function rotateVectors(vec1,vec2,theta){var e=Math.cos(theta),t=Math.sin(theta);return[[vec1[0]*e+vec2[0]*t,vec1[1]*e+vec2[1]*t,vec1[2]*e+vec2[2]*t,vec1[3]*e+vec2[3]*t],[-vec1[0]*t+vec2[0]*e,-vec1[1]*t+vec2[1]*e,-vec1[2]*t+vec2[2]*e,-vec1[3]*t+vec2[3]*e]]}function addVectors(vec1,vec2){return[vec1[0]+vec2[0],vec1[1]+vec2[1],vec1[2]+vec2[2],vec1[3]+vec2[3]]}function scaleVector(c,vec){return[c*vec[0],c*vec[1],c*vec[2],c*vec[3]]}function magnitude(vec){return Math.sqrt(vec[0]*vec[0]+vec[1]*vec[1]+vec[2]*vec[2]+vec[3]*vec[3])}function normalize(vec){var e=magnitude(vec);return[vec[0]/e,vec[1]/e,vec[2]/e,vec[3]/e]}function dotProduct(vec1,vec2){return vec1[0]*vec2[0]+vec1[1]*vec2[1]+vec1[2]*vec2[2]+vec1[3]*vec2[3]}function mat4TimesVector(mat,vec){return[mat[0][0]*vec[0]+mat[0][1]*vec[1]+mat[0][2]*vec[2]+mat[0][3]*vec[3],mat[1][0]*vec[0]+mat[1][1]*vec[1]+mat[1][2]*vec[2]+mat[1][3]*vec[3],mat[2][0]*vec[0]+mat[2][1]*vec[1]+mat[2][2]*vec[2]+mat[2][3]*vec[3],mat[3][0]*vec[0]+mat[3][1]*vec[1]+mat[3][2]*vec[2]+mat[3][3]*vec[3]]}class ThurstonGeometries extends Applet{resolution=500;useAntialiasing=!1;fov=Math.tan(50*Math.PI/180);fovFactor=1;geometryData;rotatedForwardVec;rotatedUpVec;restrictCamera=!0;movingAmount=[0,0,0];rollingAmount=0;automoving=!1;automovingDirection=()=>[0,0,0,0];automovingSpeed=1;movingSubsteps=1;worldSize=1.5;needNewFrame=!0;constructor({canvas}){super(canvas);var e={shader:tempShader,canvasWidth:this.resolution,worldWidth:this.worldSize,worldHeight:this.worldSize,worldCenterX:0,worldCenterY:0,minWorldY:-Math.PI/2+(.001-this.worldSize/2),maxWorldY:Math.PI/2-(.001-this.worldSize/2),onResizeCanvas:this.onResizeCanvas.bind(this),interactionOptions:{useForPanAndZoom:!0,disallowZooming:!0,onPanAndZoom:()=>this.needNewFrame=!0,callbacks:{touchstart:this.onTouchStart.bind(this),touchend:this.onTouchEnd.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonGPU(canvas,e),this.listenForKeysPressed(["w","s","a","d","q","e"," ","shift","z"],(key,pressed)=>{if("z"===key){const e={t:0},t=pressed?1:.4,i=pressed?.4:1;anime({targets:e,t:1,duration:250,easing:"easeOutCubic",update:()=>{this.fovFactor=(1-e.t)*t+e.t*i,this.needNewFrame=!0}})}})}run(geometryData,resetWorldCenter=!0){this.geometryData=geometryData,this.geometryData.aspectRatio&&(this.wilson.canvas.style.aspectRatio=this.geometryData.aspectRatio),this.updateAutomaticMoving=()=>{},this.movingAmount=[0,0,0];var e=this.geometryData.usesFiberComponent?"vec4 pos, float fiber":"vec4 pos",t=this.geometryData.usesFiberComponent?", fiber":"",e={maxMarches:this.geometryData.maxMarches,maxT:this.geometryData.maxT,stepFactor:this.geometryData.stepFactor,uniformGlsl:this.geometryData.uniformGlsl??"",dotProductGlsl:this.geometryData.dotProductGlsl,normalizeGlsl:this.geometryData.normalizeGlsl,getNormalVecGlsl:this.geometryData.getNormalVecGlsl,functionGlsl:this.geometryData.functionGlsl??"",posSignature:e,distanceEstimatorGlsl:this.geometryData.distanceEstimatorGlsl,getColorGlsl:this.geometryData.getColorGlsl,addFiberArgument:t,lightGlsl:this.geometryData.lightGlsl,ambientOcclusionDenominator:this.geometryData.ambientOcclusionDenominator,doClipBrightening:this.geometryData.doClipBrightening,fogGlsl:this.geometryData.fogGlsl,raymarchSetupGlsl:this.geometryData.raymarchSetupGlsl??"",geodesicGlsl:this.geometryData.geodesicGlsl,correctPosGlsl:this.geometryData.correctPosGlsl,finalTeleportationGlsl:this.geometryData.finalTeleportationGlsl??"",updateTGlsl:this.geometryData.updateTGlsl},t=createShader(e),i=(resetWorldCenter&&(this.wilson.resizeWorld({centerX:0,centerY:0}),this.lastWorldCenterX=this.wilson.worldCenterX,this.lastWorldCenterY=this.wilson.worldCenterY),{worldSize:this.geometryData.aspectRatio&&!this.geometryData.ignoreAspectRatio?[Math.max(1,geometryData.aspectRatio),Math.max(1,1/geometryData.aspectRatio)]:[1,1],uvScale:1,uvCenter:[0,0],clipDistance:1e3,fov:(this.geometryData.fov??this.fov)*this.fovFactor,cameraPos:this.geometryData.cameraPos,upVec:this.geometryData.upVec,rightVec:this.geometryData.rightVec,forwardVec:this.geometryData.forwardVec,...this.geometryData.getUpdatedUniforms()??{}});this.wilson.loadShader({id:"draw",shader:t,uniforms:i}),this.useAntialiasing&&(this.wilson.loadShader({id:"edgeDetect",shader:edgeDetectShader,uniforms:{stepSize:[1/this.wilson.canvasWidth,1/this.wilson.canvasHeight]}}),t=createShader({...e,antialiasing:!0}),this.wilson.loadShader({id:"antialias",shader:t,uniforms:{...i,stepSize:[2/(3*this.wilson.canvasWidth),2/(3*this.wilson.canvasHeight)]}}),this.createTextures()),this.geometryData.aspectRatio&&this.wilson.resizeCanvas({width:this.wilson.canvasWidth}),setTimeout(()=>window.dispatchEvent(new Event("resize")),16),this.resume()}createTextures(){this.wilson.createFramebufferTexturePair({id:"0",textureType:"float"}),this.wilson.createFramebufferTexturePair({id:"1",textureType:"float"}),this.wilson.useFramebuffer("0"),this.wilson.useTexture("0"),this.wilson.setUniforms({stepSize:[1/this.wilson.canvasWidth,1/this.wilson.canvasHeight]},"edgeDetect"),this.wilson.setUniforms({stepSize:[2/(3*this.wilson.canvasWidth),2/(3*this.wilson.canvasHeight)]},"antialias"),this.wilson.useShader("draw")}resume(){this.needNewFrame=!0,this.animationPaused=!1,requestAnimationFrame(this.drawFrame.bind(this))}drawFrame(timestamp){var t=timestamp-this.lastTimestamp;if(this.lastTimestamp=timestamp,0!=t){this.geometryData.teleportCamera(this.rotatedForwardVec,this.recomputeRotation.bind(this));var e=this.geometryData.getUpdatedUniforms()??{},e=(this.wilson.setUniforms(e,"draw"),this.useAntialiasing&&this.wilson.setUniforms(e,"antialias"),this.keysPressed.w||2===this.numTouches?this.movingAmount[0]=1:(this.keysPressed.s||3<=this.numTouches)&&(this.movingAmount[0]=-1),this.keysPressed.d?this.movingAmount[1]=1:this.keysPressed.a&&(this.movingAmount[1]=-1),this.keysPressed[" "]?this.movingAmount[2]=1:this.keysPressed.shift&&(this.movingAmount[2]=-1),this.keysPressed.e?this.rollingAmount=1:this.keysPressed.q&&(this.rollingAmount=-1),this.updateAutomaticMoving(t),0!==this.movingAmount[0]||0!==this.movingAmount[1]||0!==this.movingAmount[2]);if(e){this.needNewFrame=!0,this.movingAmount[0]&&(this.handleMoving([Math.sign(this.movingAmount[0]),0,0],t*Math.abs(this.movingAmount[0])),this.geometryData.correctVectors()),this.movingAmount[1]&&(this.handleMoving([0,Math.sign(this.movingAmount[1]),0],t*Math.abs(this.movingAmount[1])),this.geometryData.correctVectors()),this.movingAmount[2]&&!this.geometryData.render1D&&(this.handleMoving([0,0,Math.sign(this.movingAmount[2])],t*Math.abs(this.movingAmount[2])),this.geometryData.correctVectors());for(let e=0;e<3;e++)this.movingAmount[e]*=moveFriction**(t/6.944),Math.abs(this.movingAmount[e])<moveStopThreshhold&&(this.movingAmount[e]=0)}else this.movingAmount=[0,0,0];this.geometryData.correctVectors(),this.handleRotating(),this.handleRolling(t),this.updateUniforms("draw"),this.useAntialiasing&&this.updateUniforms("antialias"),this.needNewFrame&&(this.useAntialiasing&&this.wilson.useFramebuffer("0"),this.wilson.drawFrame(),this.geometryData.drawFrameCallback(),this.useAntialiasing&&(this.wilson.useShader("edgeDetect"),this.wilson.useTexture("0"),this.wilson.useFramebuffer("1"),this.wilson.drawFrame(),this.wilson.useShader("antialias"),this.wilson.useTexture("1"),this.wilson.useFramebuffer(null),this.wilson.drawFrame(),this.wilson.useShader("draw")),this.needNewFrame=!1),this.animationPaused||requestAnimationFrame(this.drawFrame.bind(this))}}downloadFrame(filename){this.needNewFrame=!0,this.drawFrame(),this.wilson.downloadFrame(filename,!1)}async downloadMosaic(filename,size){this.wilson.setUniforms({uvScale:1/size},"draw"),this.useAntialiasing&&this.wilson.setUniforms({uvScale:1/size},"antialias");const i=[];for(let e=0;e<size;e++)i.push((1+2*e)/size-1);const s=[];for(let t=0;t<size;t++){s.push([]);for(let e=0;e<size;e++)s[t].push(document.createElement("canvas")),s[t][e].width=this.resolution,s[t][e].height=this.resolution}const a=async()=>{var e=document.createElement("canvas"),t=(e.width=this.resolution*size,e.height=this.resolution*size,e.getContext("2d",{colorSpace:"display-p3"}));for(let i=0;i<size;i++)for(let e=0;e<size;e++)t.drawImage(s[i][e],i*this.resolution,e*this.resolution);t.translate(0,this.resolution*size),t.scale(1,-1),t.drawImage(e,0,0),e.toBlob(blob=>{var e=document.createElement("a");e.href=URL.createObjectURL(blob),e.download=filename,e.click()}),await new Promise(resolve=>setTimeout(resolve,100)),this.wilson.setUniforms({uvScale:1,uvCenter:[0,0]},"draw"),this.useAntialiasing&&this.wilson.setUniforms({uvScale:1,uvCenter:[0,0]},"antialias"),this.needNewFrame=!0};let o=0,r=0;const n=async()=>{var e=s[o][r].getContext("2d",{colorSpace:"display-p3"}),t=(this.wilson.setUniforms({uvCenter:[i[o],i[r]]},"draw"),this.useAntialiasing&&this.wilson.setUniforms({uvCenter:[i[o],i[r]]},"antialias"),this.needNewFrame=!0,this.drawFrame(),new ImageData(new Uint8ClampedArray(this.wilson.readPixels()),this.resolution,this.resolution));e.putImageData(t,0,0),await new Promise(resolve=>setTimeout(resolve,500)),++r===size&&(r=0,o++),o!==size?requestAnimationFrame(n):a()};requestAnimationFrame(n)}updateUniforms(shader){this.wilson.setUniforms({cameraPos:this.geometryData.cameraPos,upVec:this.geometryData.render1D?[0,0,0,0]:this.rotatedUpVec,rightVec:this.geometryData.rightVec,forwardVec:this.rotatedForwardVec,fov:(this.geometryData.fov??this.fov)*this.fovFactor},shader)}handleMoving(movingAmount,timeElapsed){for(let i=0;i<this.movingSubsteps;i++){var e=this.rotatedForwardVec,e=this.geometryData.normalize([movingAmount[0]*e[0]+movingAmount[1]*this.geometryData.rightVec[0]+movingAmount[2]*this.geometryData.upVec[0],movingAmount[0]*e[1]+movingAmount[1]*this.geometryData.rightVec[1]+movingAmount[2]*this.geometryData.upVec[1],movingAmount[0]*e[2]+movingAmount[1]*this.geometryData.rightVec[2]+movingAmount[2]*this.geometryData.upVec[2],movingAmount[0]*e[3]+movingAmount[1]*this.geometryData.rightVec[3]+movingAmount[2]*this.geometryData.upVec[3]]),t=timeElapsed/(1e3*this.movingSubsteps)*this.geometryData.movingSpeed;this.automoving?this.geometryData.cameraPos=this.geometryData.correctPosition(this.geometryData.followGeodesic(this.geometryData.cameraPos,this.automovingDirection(),this.automovingSpeed*t)):this.geometryData.cameraPos=this.geometryData.correctPosition(this.geometryData.followGeodesic(this.geometryData.cameraPos,e,t)),this.geometryData.normalVec=this.geometryData.getNormalVec(this.geometryData.cameraPos),this.geometryData.handleMovingCallback(movingAmount,timeElapsed)}}recomputeRotation(newRotatedForwardVec){var e=scaleVector(1/magnitude(this.geometryData.forwardVec),this.geometryData.forwardVec),t=scaleVector(1/magnitude(this.geometryData.upVec),this.geometryData.upVec),t=addVectors(t,scaleVector(-dotProduct(e,t),e)),e=Math.asin(dotProduct(newRotatedForwardVec,t)/dotProduct(this.geometryData.upVec,t));this.wilson.resizeWorld({centerY:e}),this.handleRotating()}lastWorldCenterY=0;handleRotating(){var e=this.geometryData.lockedOnOrigin?-1:1,t=(this.geometryData.render1D&&this.wilson.resizeWorld({centerY:0}),0===this.wilson.worldCenterX&&this.wilson.worldCenterY===this.lastWorldCenterY||(this.needNewFrame=!0),this.lastWorldCenterY=this.wilson.worldCenterY,rotateVectors(this.geometryData.forwardVec,this.geometryData.rightVec,e*this.wilson.worldCenterX)),t=(this.geometryData.forwardVec=t[0],this.geometryData.rightVec=t[1],this.wilson.resizeWorld({centerX:0}),rotateVectors(this.geometryData.forwardVec,this.geometryData.upVec,e*this.wilson.worldCenterY));this.rotatedForwardVec=t[0],this.rotatedUpVec=t[1],this.restrictCamera||(this.wilson.resizeWorld({centerY:0}),this.geometryData.forwardVec=t[0],this.geometryData.upVec=t[1],this.rotatedForwardVec=t[0],this.rotatedUpVec=t[1]),this.geometryData.lockedOnOrigin&&(this.geometryData.cameraPos=scaleVector(-2.5,this.rotatedForwardVec),this.geometryData.cameraPos[3]=1)}handleRolling(timeElapsed){var e;!this.rollingAmount||this.geometryData.render1D||this.automoving||(this.needNewFrame=!0,this.wilson.worldCenterY&&(this.wilson.resizeWorld({centerY:0}),this.geometryData.upVec=[...this.rotatedUpVec],this.geometryData.forwardVec=[...this.rotatedForwardVec]),e=timeElapsed*this.rollingAmount*.0015,[this.geometryData.rightVec,this.geometryData.upVec]=rotateVectors(this.geometryData.rightVec,this.geometryData.upVec,e),this.rotatedUpVec=[...this.geometryData.upVec],this.rollingAmount*=rollingFriction**(timeElapsed/6.944),Math.abs(this.rollingAmount)<rollingStopThreshhold&&(this.rollingAmount=0))}onResizeCanvas(){var e=this.geometryData.aspectRatio&&!this.geometryData.ignoreAspectRatio?[Math.max(1,this.geometryData.aspectRatio),Math.max(1,1/this.geometryData.aspectRatio)]:[Math.max(this.wilson.worldWidth/this.wilson.worldHeight,1),Math.max(this.wilson.worldHeight/this.wilson.worldWidth,1)];this.wilson.setUniforms({worldSize:e},"draw"),this.useAntialiasing&&(this.wilson.setUniforms({worldSize:e,stepSize:[2/(3*this.wilson.canvasWidth),2/(3*this.wilson.canvasHeight)]},"antialias"),this.createTextures()),this.needNewFrame=!0}touchDelay=0;numTouches=0;onTouchStart({event}){this.numTouches<=1&&2===event.touches.length?(this.numTouches=2,this.touchDelay=100):this.numTouches<=2&&3===event.touches.length?this.numTouches=3:this.numTouches=0}onTouchEnd({event}){event.touches.length<2&&(this.numTouches=0)}moveForever({speed=1,direction=()=>[1,0,0,0],rampStart=!1}={}){let e=0;this.movingAmount=[0,0,0],this.automovingDirection=direction,this.automoving=!0,this.automovingSpeed=speed,setTimeout(()=>{this.updateAutomaticMoving=timeElapsed=>{this.automoving&&(e+=timeElapsed,this.movingAmount=[speed,0,0],rampStart)&&(this.movingAmount[0]*=Math.min(e/500,1))}},16)}async switchScene({newCameraPosOverride,duration=500}={}){if(this.geometryData instanceof SolRooms){await anime({targets:this.canvas.parentElement,opacity:0,duration:duration/2,easing:"easeOutQuad"}).finished;var e=new SolSpheres;e.aspectRatio=this.geometryData.aspectRatio,this.run(e);try{$("#wall-thickness-slider").parentNode.style.display="none"}catch(e){}anime({targets:this.canvas.parentElement,opacity:1,duration:duration/2,easing:"easeOutQuad"}).finished}else if(this.geometryData instanceof SolSpheres){await anime({targets:this.canvas.parentElement,opacity:0,duration:duration/2,easing:"easeOutQuad"}).finished;e=new SolRooms;e.aspectRatio=this.geometryData.aspectRatio,e.sliderValues.wallThickness=.3,this.run(e);try{$("#wall-thickness-slider").parentNode.style.display=""}catch(e){}anime({targets:this.canvas.parentElement,opacity:1,duration:duration/2,easing:"easeOutQuad"}).finished}else{e=0===this.geometryData.sliderValues.sceneTransition;const t=this.geometryData.sliderValues.sceneTransition,i=e?1:0;e=newCameraPosOverride??(i?this.geometryData.getNearestCorner():this.geometryData.getNearestCenter());this.moveCameraTo({newCameraPos:e,duration:duration});const s={t:0};anime({targets:s,t:1,duration:duration,easing:"easeInOutQuad",update:()=>{this.geometryData.sliderValues.sceneTransition=(1-s.t)*t+s.t*i},complete:()=>{s.t=1,this.geometryData.sliderValues.sceneTransition=(1-s.t)*t+s.t*i}})}}async moveCameraTo({newCameraPos,duration}){const i=[...this.geometryData.cameraPos],s={t:0};let a=0;await anime({targets:s,t:1,duration:duration,easing:"easeInOutSine",update:()=>{for(let t=0;t<60;t++){var e=a+(s.t-a)*t/60;this.geometryData.cameraPos=this.geometryData.correctPosition([(1-e)*i[0]+e*newCameraPos[0],(1-e)*i[1]+e*newCameraPos[1],(1-e)*i[2]+e*newCameraPos[2],(1-e)*i[3]+e*newCameraPos[3]]),this.geometryData.normalVec=this.geometryData.getNormalVec(this.geometryData.cameraPos),this.geometryData.correctVectors(),this.handleRotating()}this.needNewFrame=!0,a=s.t},complete:()=>{this.geometryData.cameraPos=this.geometryData.correctPosition(newCameraPos),this.geometryData.normalVec=this.geometryData.getNormalVec(this.geometryData.cameraPos),this.geometryData.correctVectors(),this.handleRotating(),this.needNewFrame=!0}}).finished}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await new Promise(resolve=>setTimeout(resolve,33))}}export{rotateVectors,magnitude,normalize,dotProduct,mat4TimesVector,ThurstonGeometries};