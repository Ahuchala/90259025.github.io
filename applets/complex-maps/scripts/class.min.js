import{getGlslBundle,loadGlsl}from"../../../scripts/src/complexGlsl.min.js";import{AnimationFrameApplet}from"/scripts/applets/animationFrameApplet.min.js";import{tempShader}from"/scripts/applets/applet.min.js";import{WilsonGPU}from"/scripts/wilson.min.js";class ComplexMaps extends AnimationFrameApplet{loadPromise;generatingCode="";uniformCode="";uniforms={};resolution=500;blackPoint=1;whitePoint=1;draggableCallback;addIndicatorDraggable=!1;useSelectorMode=!1;constructor({canvas,generatingCode,uniformCode="",uniforms={},worldWidth=4,worldHeight,worldCenterX=0,worldCenterY=0,addIndicatorDraggable=!1,draggableCallback=()=>{},selectorMode=!1}){super(canvas);var e={shader:tempShader,canvasWidth:this.resolution,worldWidth:worldWidth,worldHeight:worldHeight,worldCenterX:worldCenterX,worldCenterY:worldCenterY,minWorldWidth:2e-5,maxWorldWidth:100,minWorldHeight:2e-5,maxWorldHeight:100,onResizeCanvas:()=>this.needNewFrame=!0,draggableOptions:{draggables:{draggableArg:[1,1]},callbacks:{drag:this.onDragDraggable.bind(this)}},interactionOptions:{useForPanAndZoom:!0,onPanAndZoom:()=>this.needNewFrame=!0,callbacks:{mousedown:this.onGrabCanvas.bind(this),touchstart:this.onGrabCanvas.bind(this)}},fullscreenOptions:{onSwitch:this.switchFullscreen.bind(this),beforeSwitch:this.beforeSwitchFullscreen.bind(this),fillScreen:!0,useFullscreenButton:!0,enterFullscreenButtonIconPath:"/graphics/general-icons/enter-fullscreen.png",exitFullscreenButtonIconPath:"/graphics/general-icons/exit-fullscreen.png"}};this.wilson=new WilsonGPU(canvas,e),this.wilson.draggables.draggableArg.element.style.display="none",this.loadPromise=new Promise(resolve=>{loadGlsl().then(()=>{this.run({generatingCode:generatingCode,uniformCode:uniformCode,uniforms:uniforms,worldWidth:worldWidth,worldHeight:worldHeight,worldCenterX:worldCenterX,worldCenterY:worldCenterY,addIndicatorDraggable:addIndicatorDraggable,draggableCallback:draggableCallback,selectorMode:selectorMode}),resolve()})})}run({generatingCode=this.generatingCode,uniformCode=this.uniformCode,uniforms=this.uniforms,worldWidth,worldHeight,worldCenterX,worldCenterY,addIndicatorDraggable=this.addIndicatorDraggable,draggableCallback=this.draggableCallback,selectorMode=!1}){this.generatingCode=generatingCode,this.uniformCode=uniformCode,this.uniforms=uniforms,this.wilson.resizeWorld({width:worldWidth,height:worldHeight,centerX:worldCenterX,centerY:worldCenterY}),this.addIndicatorDraggable=addIndicatorDraggable,this.draggableCallback=draggableCallback;var e=-1!==generatingCode.indexOf("draggableArg"),r=selectorMode?`
				imageZ.x += 127.0;
				imageZ.y += 127.0;
				
				float whole1 = floor(imageZ.x);
				float whole2 = floor(imageZ.y);
				
				float fract1 = (imageZ.x - whole1);
				float fract2 = (imageZ.y - whole2);
				
				gl_FragColor = vec4(whole1 / 256.0, fract1, whole2 / 256.0, fract2);
				
				return;
			`:"",r=`
			precision highp float;
			
			varying vec2 uv;

			uniform vec2 worldSize;
			uniform vec2 worldCenter;
			
			uniform float blackPoint;
			uniform float whitePoint;
			
			${e?"uniform vec2 draggableArg;":""}
			
			${uniformCode}
			
			${getGlslBundle(generatingCode)}
			
			vec3 hsvToRgb(vec3 c)
			{
				vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
				vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
				return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
			}
			
			vec2 f(vec2 z)
			{
				return ${generatingCode};
			}
			
			void main(void)
			{
				vec2 z = uv * worldSize * 0.5 + worldCenter;
				
				vec2 imageZ = f(z);
				
				${r}
				
				float modulus = length(imageZ);
				
				float h = atan(imageZ.y, imageZ.x) / 6.283;
				float s = clamp(1.0 / (1.0 + .01 * (modulus / whitePoint / whitePoint)), 0.0, 1.0);
				float v = clamp(1.0 / (1.0 + .01 / (modulus * blackPoint * blackPoint)), 0.0, 1.0);
				
				gl_FragColor = vec4(hsvToRgb(vec3(h, s, v)), 1.0);
			}
		`;this.wilson.loadShader({shader:r,uniforms:{worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY],blackPoint:this.blackPoint,whitePoint:this.whitePoint,...uniforms,...e?{draggableArg:this.wilson.draggables.draggableArg.location}:{}}}),this.wilson.draggables.draggableArg.element.style.display=e||addIndicatorDraggable?"block":"none",this.resume(),this.needNewFrame=!0}onGrabCanvas({x,y}){var e;this.useSelectorMode&&(this.run({selectorMode:!0}),e=setTimeout(()=>{this.wilson.drawFrame();var e=this.wilson.interpolateWorldToCanvas([x,y]),e=this.wilson.readPixels({row:this.wilson.canvasHeight-e[0],col:e[1],width:1,height:1}),r=e[0]-127+e[1]/256,e=e[2]-127+e[3]/256,o=e<0?"-":"+";console.log(`${x} ${y<0?"-":"+"} ${Math.abs(y)}i |---> ${r} ${o} ${Math.abs(e)}i`),this.run({selectorMode:!1}),this.useSelectorMode=!1},20),this.timeoutIds.push(e))}onDragDraggable({x,y}){this.draggableCallback({x:x,y:y}),this.addIndicatorDraggable||this.wilson.setUniforms({draggableArg:[x,y]}),this.needNewFrame=!0}drawFrame(){this.wilson.setUniforms({worldSize:[this.wilson.worldWidth,this.wilson.worldHeight],worldCenter:[this.wilson.worldCenterX,this.wilson.worldCenterY]}),this.wilson.drawFrame()}switchFullscreen(){this.resume()}async beforeSwitchFullscreen(){this.animationPaused=!0,await new Promise(resolve=>setTimeout(resolve,33))}}export{ComplexMaps};